% !TEX encoding = UTF-8 Unicode
%%
%% texjazz-assignpoints.sty
%%
%% A LaTeX package to assign points within exercises and quizzes.
%%
%% Copyright (c) 2020 ejazz.
%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% This work is part of the TeXjazz bundle. It may be distributed and/or modified under the
% conditions of the LaTeX Project Public License, either version 1.3
% of this license or (at your option) any later version.
% The latest version of this license is in
%   http://www.latex-project.org/lppl.txt
% and version 1.3 or later is part of all distributions of LaTeX
% version 2005/12/01 or later.
%
% The Current Maintainer of this work is ejazz <ejazz.fr@gmail.com>.
%
% This work consists of the files `texjazz-assignpoints.sty' and `texjazz-assignpoints.tex'.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%---------------------------------------------------------------------------------------------------
%----- Note of using − licenses dues Henning Kerstan (LPPL)
%---------------------------------------------------------------------------------------------------
%- In order to be distributed with other style extensions in a tested version known to work, this
%- file is a copy of the `exercisespoints' package by Henning Kerstan.  Nevertheless, for
%- convenience and completeness, minor modifications have been made to improve its use.
%- In particular, the same points numbering system has been extended to quiz and quizquestion
%- environments (as direct copy). The user is invited to look after the updates carried out
%- by the original author of this package and to check their compatibility with other style
%- extensions. Other additions and/or specific configurations made to this package can be done
%- in the core body of the different LaTeX classes and document sources.
%---------------------------------------------------------------------------------------------------
%----- Disclaimer (ejazz − <ejazz.fr@gmail.com>):
%- All the following modifications have been done in the "spirit" of the "Free Software" (FSF), but
%- the "modifier" is not really aware about the LaTeX Project Public License (LPPL) implications.
%- All parts of borrowed codes duly mention their respective authors and/or references (packages
%- or TeX.SX answers); the package name has been changed accordingly.
%- This work is mainly a generalised copy of some existing solutions. Thus, it is proposed in the
%- perspective of being useful and modifications which have been made can be used as you like fit
%- under a free and open source license (including with "copyleft") or in that of the LPPL v1.3c.
%- If this work conflicts with someone's copyright, please report it to bring it into compliance.
%---------------------------------------------------------------------------------------------------
%----- Changes and motivations (ejazz, first shy attempt to extend features of an official package):
%-  * Modifying the package name for compatibility reasons as "assignpoints" but it could as well be
%-    "addpoints". It seems also that this new name is more accurate, because its coverage is larger
%-    than just exercise environments. Maybe in the future, a further work could be to internally
%-    and automatically detect which kind of environment is involved to have the same set of
%-    commands (\points, \itempoints, \getpoints, etc.) whatever the considered environment is.
%-    !− Half of this latter feature is done: only for exercise and quiz --> extend to new env.? −!
%-  * Setting explicitly long internal macros names, in order not to clash with other packages
%-    and also for readability. Adding a prefix to separate and easily manage targets macros while
%-    allowing to factorise storage and display functions. TODO: To be improved...
%-  * Using the `etoolbox' package instead of the `ifthen' package. Nethertheless, the `ifthen'
%     package is still useful for other functionalities like \showcase macro (using \whiledo).
%-  * As a consequence, simplifying and having a better control of singular/plural forms
%-    for the display of "point" (less than 1.0 pt) versus "points" (greater than 1.01 pts).
%-    See the definition of the \getpoints command.
%-  * According to some languages, printing the points (internally lengths) with a comma or period
%-    decimal separator (after having borrowed ideas to `printlen' Peter Wilson's or `xprintlen'
%-    Liam Huang's packages, some approaches have been taken from the `numprint' Harald Harders'
%-    package). Essentially, some amazing and clever solutions have been "stolen" to A. Ellett
%-    and E. Gregorio from their answers on TeX.SX.
%-  * Using the `xparse' package to enlarge possibilities in definitions of commands/environments.
%-    In that respect, defining "star" macros to display points with "unit", i.e. the point(s):
%-    the bias being that nowadays, like for the `etoolbox' package, most style extensions use
%-    this interface, so this package is often already loaded and ready to use.
%-    TODO − To deal with safety, coherence and completeness, use the `xparse' interface
%-    for *all* macros: conditionals, commands, environments, etc. LaTeX3 translation? No skills :-(
%-  * Changing the \newenvironment definition into \ProvideDocumentEnvironment (`xparse' feature),
%-    not to impose the package set-up, but let the user free to define her/his own environments.
%-    Not yet implemented.
%-  * Checking if the environment titles are empty strings or not for later use (`etoolbox' toggle).
%-  * Verifying the numbering counter of each environments (also for sub exercise and quiz question)
%-    in order to get their value in the core body of the document via a generalised polyvalent
%-    \getpoints command and adequate storage.
%-  * Starting the counting of exercise/subexercise and quiz/quizquestion from one and not zero.
%-  * Applying all the stuff to quizzes.
%-  * Trying to take into account French/English indentations (not sure nor stable... French = OK).
%-  * Tiny cosmetic addings (like exercise/quizzes name translation English/French/German, source
%-    file line width up to 100 characters, or log file and printed messages) and over-commenting
%-    the code because I have no brain and a solely neuron...
%---------------------------------------------------------------------------------------------------
%----- Nota Bene
%- All the commands from the `exercisepoints' package keep the same signification: by default and
%- without optional argument, the commands are applied to the exercise environment, i.e.: \points,
%- \itempoints, \getpoints, \bonuspoints, \getbonuspoints, etc.
%- The commands which assign points to an environment − exercise or quiz − are automatically
%- detected, that is to say \points and \itempoints commands can be indifferently used within
%- an exercise or in a quiz.
%- On the other hand, commands that read and display the recorded points, for quizzes, must
%- explicitly indicate that this applies to quizzes. Indeed, the exercise environment is the
%- default but not the quiz environment.
%- The only feature which is lacking from the `exercisepoints' package is the \setitempointsunit
%- command: modifying the "point(s) unit" word mid-document.
%---------------------------------------------------------------------------------------------------


%-- Package identification

\NeedsTeXFormat{LaTeX2e}
\ProvidesPackage{texjazz-assignpoints}%
  [2020/12/08 v0.1a − Counting points within exercises and quizzes environments]

%-- Utilities

%- Helper packages

\RequirePackage{xparse}% LaTeX3 syntax parser for LaTeX2e to define advanced commands/environments
\RequirePackage{etoolbox}% Swiss knife!
\RequirePackage{pgfkeys}% Key-value options management
\RequirePackage{ifthen}% An additional swiss knife!
\RequirePackage{metalogox}% Cosmetics: to be tweaked with used font(s), not done
\RequirePackage{framed}% Cosmetics too: for adding a leftbar to first run message
\RequirePackage{xcolor}% Cosmetics again: for having a coloured leftbar for the first run message
\RequirePackage{booktabs}% Cosmetics stil: for having elegant tabular simple layout

%- Booktabs settings
\setlength{\abovetopsep}{0pt}
\setlength{\aboverulesep}{0pt}
\setlength{\belowrulesep}{1pt}
\setlength{\belowbottomsep}{1pt}

%-- Printing lengths/points. No further search, but one can use a sledgehammer to crack a nut...

%\RequirePackage{printlen}% Converting unit length (pt, mm, cm, etc.) and printing (basic)
%\RequirePackage{xprintlen}% Converting and printing length/points (basic, but with `fp' package)
%\RequirePackage{lengthconvert}%
%\RequirePackage{numprint}% To change decimal point separator to comma (German, French...)
%\RequirePackage{siunitx}% Also printing according to languages usage

%-- Searching for a simpler way to split a number (integer part vs. decimal part)

%- Solutions given by egreg with `pgfplots':
%-   https://tex.stackexchange.com/questions/141722/[...]
%-       [...]separating-a-decimal-number-into-whole-and-fractional-parts-with-only-the-digits
%-   https://tex.stackexchange.com/questions/142320/
%-   https://tex.stackexchange.com/questions/142320/[...]
%-       [...]separating-a-decimal-in-any-format-into-integer-and-fractional-parts-in-basic-la
%- See also the solution given by Steven B. Segletes:
%-   https://tex.stackexchange.com/questions/211713/parser-for-decimal-numbers-in-plain-tex

%- After digging more in deep in TeX.SE, the more direct way to split the different parts of a
%- length seems to be given by A. Ellet or E. Gregorio:
%-   https://tex.stackexchange.com/questions/142139/still-having-difficulty-with-use-of-expandafter
%- How it works in details remains a great mystery for the time being...
%- To start with, one can see (this link is interesing also for other things):
%-   https://tex.stackexchange.com/questions/19746/cunning-latex-tricks (egreg)
%- TODO: REALLY understand ALL this stuff! What is the egreg's roman numeral trick?
%- Below, we test these two short solutions (but far surpassing our skills). It works fine!

%- Warning − We let all the tested solutions for the record (to be deleted if not used)

%-- Splitting integer and decimal parts of a number

%-- IMPORTANT COMMENT ABOUT TESTING REAL EMPTY/BLANK STRINGS OR STUFF (just references to TeX.SE)
%------------------------------------------------------------------------------------------------
%- https://tex.stackexchange.com/questions/42280/expand-away-empty-macros-within-ifthenelse
%- https://tex.stackexchange.com/questions/23100/looking-for-an-ignorespacesandpars
%- https://tex.stackexchange.com/questions/44919/proper-way-to-detect-empty-blank-text
%- https://tex.stackexchange.com/questions/279652/macro-like-ignorespaces-for-ignoring-pars
%- https://tex.stackexchange.com/questions/179016/ignore-spaces-and-pars-after-an-environment

%- A. Ellet solution − a test must be done to detect the decimal part if blank/empty
%- Unfortunately, we failed in a way to detect an empty value --> This is an issue here

%\def\assignpointsgetlengthparts#1{%
%  \edef\set@stripped@length{\strip@pt#1}%
%  \expandafter\assignpoints@int@frac\set@stripped@length..\@nil
%}
%\def\assignpoints@int@frac#1.#2.#3\@nil{%
%  \def\assignpointsinteger{#1}%%
%  \def\assignpointsdecimal{#2}%%
%}
%%- Tweaked to get the parts of a number − Application: detecting the counter of an environment
%\def\assignpointsgetnumberparts#1{%
%  \edef\set@number{#1}%
%  %\expandafter\assignpointsnumeberparts@int@frac\set@number..\@nil
%  \expandafter\assignpointsnumeberparts@int@frac\set@number..\@nil
%}
%\def\assignpointsnumeberparts@int@frac#1.#2.#3\@nil{%
%	\def\assignpointsintegerpart{#1}%
%	\def\assignpointsdecimalpart{#2}%
%}
%%- Debug displaying
%\def\showparts{%%
%  \begin{tabular}{ll}\hline
%  Length   & \the\aelength\\
%  Integer  & \assignpointsinteger \\
%  Fraction & \assignpointsdecimal \\\hline
%  \end{tabular}}
%\def\aenumber{5.6}
%\def\shownumberparts{%%
%  \begin{tabular}{ll}\hline
%  Number   & \aenumber\\
%  Integer  & \assignpointsintegerpart \\
%  Fraction & \assignpointsdecimalpart \\\hline
%  \end{tabular}}

%- E. Gregorio solution − works in all cases (see reference): number, macro, length
%- Once again, we failed in a way to detect an empty value --> This is an issue here

%\def\printplainbefore#1{\expandafter\@printplainbefore\romannumeral-`Q#1..\@nil}
%\def\@printplainbefore#1.#2.#3\@nil{#1}
%\def\printplainafter#1{\expandafter\@printplainafter\romannumeral-`Q#1..\@nil}
%\def\@printplainafter#1.#2.#3\@nil{#2}
%\begingroup\catcode`P=12 \catcode`T=12
%\lowercase{\endgroup\def\simplerem@pt#1PT{#1}}
%\def\simplestrip@pt{\expandafter\simplerem@pt\the}
%\newcommand*{\assignpointsgetlength}[1]{\simplestrip@pt#1}
%\newcommand*{\assignpointsinteger}[1]{\printplainbefore{\assignpointsgetlength{#1}}}% #1 = a length
%\newcommand*{\assignpointsdecimal}[1]{\printplainafter{\assignpointsgetlength{#1}}}% #1 = a length
%\newcommand*{\assignpointssplitinteger}[1]{\printplainbefore{#1}}% #1 = a number
%\newcommand*{\assignpointssplitdecimal}[1]{\printplainafter{#1}}% #1 = a number

%- D. Carlisle solution (it works and can be the solution for splitting number into counters):
%-   https://tex.stackexchange.com/questions/211713/parser-for-decimal-numbers-in-plain-tex

%\newcount\ca
%\newcount\cb
%\def\p#1{%
%	\def\digitone{}%
%	\ifx+#1\def\sign{#1}\else
%		\ifx-#1\def\sign{#1}\else
%			\def\sign{}\def\digitone{#1}\fi\fi
%	\afterassignment\n\ca=1\digitone%
%}
%\def\n#1{%
%	\def\digitone{}%
%	\ifx,#1\def\point{#1}\else
%		\ifx.#1\def\point{.}\else
%			\def\point{}\def\digitone{#1}\fi\fi
%	\afterassignment\nn\cb=1\digitone%
%}
%\def\gobble#1{}
%\def\nn{\par
%	[sign=\sign]
%	[n1=\expandafter\gobble\the\ca]
%	[point=\point]
%	[n2=\expandafter\gobble\the\cb]
%	\par%
%}
%\def\carlisle{\p 123 hello \p456,99 hafa \p ggg \p-12,88}

%- E. Gregorio second solution − works but as stipulate in a comment, it is impossible to
%- distinguish the case where the integer or fractional part is empty: the values are set to zero.
%- So \assignpointssplitbefore{.1} and \assignpointssplitbefore{0.1} will give the same result
%- We adopt it because if a value is empty it gives zero, thus we can test it easily with
%- conditionals, such a feature that the other solutions are not able to propose (but really
%- efficient to display splitted numbers and lengths in the core body of a document).
%-   https://tex.stackexchange.com/questions/142320/[...]
%-      [...]separating-a-decimal-in-any-format-into-integer-and-fractional-parts-in-basic
%- That's it! Although we do not understand the subtleties, we are now able to check for a zero
%- value and therefore apply a condition! Cool...

\begingroup%
	\catcode`P=12 \catcode`T=12 \lowercase{\endgroup
	\def\assignpointssplitbefore#1{%
		\expandafter\apts@strip@pt\expandafter\@assignpointssplitbefore\the\dimexpr#1PT\relax\@nil
	}
	\def\assignpointssplitafter#1{%
		\expandafter\apts@strip@pt\expandafter\@assignpointssplitafter\the\dimexpr#1PT\relax\@nil
	}
	\def\@assignpointssplitbefore#1.#2.#3PT\@nil{#1}
	\def\@assignpointssplitafter#1.#2.#3PT\@nil{#2}
	\def\apts@strip@pt#1#2PT#3\@nil{#1#2..PT\@nil}
} % balance the open brace after \lowercase

%- Helping commands for displaying points depending on the language and singular/plural forms

\newcommand*{\assignpointsdecimalsep}{{.}}
\newcommand{\assignpointsunitspace}{\,}% Small space between number and point "unit"
\newcommand{\assignpointsunitsingular}[1]{\def\assignpoints@unitsingular{{#1}}}
\newcommand{\assignpointsunitplural}[1]{\def\assignpoints@unitplural{{#1}}}

%- Setting itempoints units

%\newcommand{\assignpointsitemunitsingular}{}%
%\newcommand{\assignpointsitemunitplural}{}%
%\newcommand{\setitempointsunit}[2]{% singular, plural
%	\renewcommand{\assignpoints@unitsingular}{{#1}}}%
%	\renewcommand{\assignpoints@unitplural}{{#2}}}%
	%\renewcommand{\assignpointsitemunitsingular}{#1}%
	%\renewcommand{\assignpointsitemunitplural}{#2}%
%}

%-- Checking tools

\newtoggle{assignpoints@checkemptystring}

% Useful? https://tex.stackexchange.com/questions/47237/

\newif\if@assignpoints@firstrun% <-- Testing for the first LaTeX run (certainly to be improved)
\AtBeginDocument{%                   Cf. https://tex.stackexchange.com/questions/167799/
	\ifx\@assignpoints@firstrun@test\@undefined
		\@assignpoints@firstruntrue
	\else
		\@assignpoints@firstrunfalse
	\fi
	\write\@auxout{\string\gdef\string\@assignpoints@firstrun@test{}}%
}

\newenvironment{assignpointsleftbar}{% Used to add a left bar to the first run message (see below)
	\def\FrameCommand{% Borrowed to Gonzalo Medina
		{\color{red!60!black}\vrule width 2pt depth 0pt}\hspace{4pt}%
	}%
	%\MakeFramed {\advance\hsize-\width \FrameRestore}%\vskip2pt
	\MakeFramed{\parshape 1 0cm \dimexpr\linewidth-4pt\relax\FrameRestore}%\vskip2pt%
}{\endMakeFramed}

\newcommand{\assignpoints@runmessage}{% Message in the margin at first run (cf. \displaypoints)
	\hfill% 36 mm = 36/0.351459 pt = 102.430155438 pt
	\parbox[t]{102.5pt}{% It works for minimum margin of 36 mm, only printed if \marginparwidth > 36mm
		\begin{assignpointsleftbar}% Add a coloured vertical line to the message
			\footnotesize\itshape%
			\textbf{First \LaTeX{} run:} Exercise/quiz points numbering has been defined.
				Please rerun \LaTeX{} to get cross-references right.
		\end{assignpointsleftbar}
	}%
}

%-- Defining switches for the layout and language of the environments

\newif\if@assignpoints@usecustomlayout
\@assignpoints@usecustomlayoutfalse

\newif\if@assignpoints@exercise@layoutdefined
\@assignpoints@exercise@layoutdefinedfalse

\newif\if@assignpoints@subexercise@layoutdefined
\@assignpoints@subexercise@layoutdefinedfalse

\newif\if@assignpoints@quiz@layoutdefined
\@assignpoints@quiz@layoutdefinedfalse

\newif\if@assignpoints@quizquestion@layoutdefined
\@assignpoints@quizquestion@layoutdefinedfalse

\newif\if@assignpoints@solution@layoutdefined
\@assignpoints@solution@layoutdefinedfalse

\newif\if@assignpoints@subsolution@layoutdefined
\@assignpoints@subsolution@layoutdefinedfalse

\newif\if@assignpoints@usefrenchlanguage% To be extended for compliance with language packages
\@assignpoints@usefrenchlanguagefalse

\newif\if@assignpoints@usegermanlanguage
\@assignpoints@usegermanlanguagefalse

\newif\if@assignpoints@usenoverbose
\@assignpoints@usenoverbosefalse

%-- Options

% key management
\pgfkeys{/apts/.is family}


%- Setting the default values

\renewcommand*{\assignpointsdecimalsep}{{.}}
\assignpointsunitsingular{Point}
\assignpointsunitplural{Points}

\let\parskiporiginal\parskip
\let\parindentoriginal\parindent

%- Applying options setup

\DeclareOption{customlayout}{\@assignpoints@usecustomlayouttrue}% Motivations? Don't understand...
\DeclareOption{noverbose}{\@assignpoints@usenoverbosetrue}% Accessory option: it was to test bugs.
\DeclareOption{french}{%
	\@assignpoints@usefrenchlanguagetrue%
	\renewcommand*{\assignpointsdecimalsep}{{,}}
	\assignpointsunitsingular{point}% No capital first letter in French
	\assignpointsunitplural{points}% No capital first letter in French
}
\DeclareOption{german}{% German conventions seem to be close to French ones
	\@assignpoints@usegermanlanguagetrue%
	\renewcommand*{\assignpointsdecimalsep}{{,}}
	\assignpointsunitsingular{Punkt}% Correct?
	\assignpointsunitplural{Punkte}% Correct?
}

\DeclareOption*{%- This package does not have any other options
	\PackageWarning{assignpoints}{Unknown option '\CurrentOption'}
}
\ProcessOptions\relax%

%-- Customising exercise/quiz name (easily overwritten or deleted by main class or other packages)

\if@assignpoints@usefrenchlanguage
	\providecommand{\exercisename}{Exercice}
	\providecommand{\exercisenamenocap}{exercice}
	%\providecommand{\quizname}{Quiz}
	\providecommand{\quizname}{Questionnaire}% Maybe better, but Quiz is now current, mostly with MCQ
	\providecommand{\solutionname}{Solution}
	\providecommand{\totalpointsname}{Total}
	\providecommand{\bonuspointsname}{Bonus}
	\providecommand{\totalwithbonuspointsname}{Total avec bonus}
	\providecommand{\showcaseheaderpointsname}{Points}
	\providecommand{\showcaseheadermaxpointsname}{Points max.}
\else
	\if@assignpoints@usegermanlanguage
		\providecommand{\exercisename}{Ausübung}% Correct?
		\providecommand{\exercisenamenocap}{Ausübung}
		\providecommand{\quizname}{Quiz}% Correct?
		\providecommand{\solutionname}{Lösung}% Correct?
		\providecommand{\totalpointsname}{Gesamtzahl}% Correct?
		\providecommand{\bonuspointsname}{Bonus}% Correct?
		\providecommand{\totalwithbonuspointsname}{Gesamtzahl mit bonus}% Correct?
		\providecommand{\showcaseheaderpointsname}{Punkte}% Correct?
		\providecommand{\showcaseheadermaxpointsname}{Max. Punkte}% Correct?
	\else
		\providecommand{\exercisename}{Exercise}
		\providecommand{\exercisenamenocap}{exercise}
		\providecommand{\quizname}{Quiz}
		\providecommand{\solutionname}{Solution}
		\providecommand{\totalpointsname}{Total}
		\providecommand{\bonuspointsname}{Bonus}
		\providecommand{\totalwithbonuspointsname}{Total with bonus}
		\providecommand{\showcaseheaderpointsname}{Points}
		\providecommand{\showcaseheadermaxpointsname}{Max. points}
	\fi
\fi

%-- Avoiding nested environments (i.e. putting exercises in exercises, quizzes in quizzes, etc.)

\newif\if@assignpoints@inexercise%
\global\@assignpoints@inexercisefalse%
\newif\if@assignpoints@insubexercise%
\global\@assignpoints@insubexercisefalse%

\newif\if@assignpoints@inquiz%
\global\@assignpoints@inquizfalse%
\newif\if@assignpoints@inquizquestion%
\global\@assignpoints@inquizquestionfalse%

\newif\if@assignpoints@insolution%
\global\@assignpoints@insolutionfalse%
\newif\if@assignpoints@insubsolution% subsolution is the equivalent of a solution for subexercise
\global\@assignpoints@insubsolutionfalse%

%-- Defining a prefix to be applied to storage and reading functions of the different environments

\newcommand*{\assignpointsprefix}[1]{#1}% #1 = exercise/quiz/other environment?

%-- Defining counters to store number of exercises/quizzes

\newcounter{assignpoints@exercisecount}
\newcounter{assignpoints@subexercisecount}[assignpoints@exercisecount]
\newcounter{assignpoints@maxsubexercisecount}[assignpoints@exercisecount]

\newcounter{assignpoints@quizcount}
\newcounter{assignpoints@quizquestioncount}[assignpoints@quizcount]

\newcounter{assignpoints@exercisenumber}% To display a synopsis of exercises and their points
\newcounter{assignpoints@totalexercisecount}% To have AT END DOCUMENT the number of exercises

\newcounter{assignpoints@quiznumber}% To display a synopsis of quizzes and their points
\newcounter{assignpoints@totalquizcount}% To have immediatly AT END DOCUMENT the number of quizzes

\newcounter{assignpoints@solutioncount}
\newcounter{assignpoints@subsolutioncount}[assignpoints@solutioncount]

%-- Lengths to store points, thus decimal parts are allowed (astute way to use LaTeX lengths!)
%-- See: https://tex.stackexchange.com/questions/171620/

\newlength{\assignpoints@currentexercisepoints}
\newlength{\assignpoints@currentsubexercisepoints}
\newlength{\assignpoints@exercise@totalpoints}
\newlength{\assignpoints@exercise@bonuspoints}

\newlength{\assignpoints@currentquizpoints}
\newlength{\assignpoints@currentquizquestionpoints}
\newlength{\assignpoints@quiz@totalpoints}
\newlength{\assignpoints@quiz@bonuspoints}

\newlength{\assignedcurrentpoints}% <-- Added for layout adjusting (see \displaypoints below)
\newlength{\assignedcurrentitempoints}% <-- Added for item point(s) displaying
\newlength{\assignedcurrentbonuspoints}% <-- Added for bonus point(s) displaying

\newlength{\exercisetotalpointsdim}% <-- Retrieving a length for the \exercisetotalpoint command
\newlength{\quiztotalpointsdim}% <-- Retrieving a length for the \quiztotalpoint command
\newlength{\exercisetotalpointswhithbonusdim}% <-- Having a length for exercise points with bonus
\newlength{\quiztotalpointswithbonusdim}% <-- Having a length for quizzes points with bonus

%-- Getting total points and total number of exercises/quizzes (whole document)

\ProvideDocumentCommand{\exercisetotalpoints}{ s }{%
	%- At the first run, no value available in the "aux" file --> wait for the second run
	\IfBooleanTF{#1}%
		{\if@assignpoints@firstrun\textit{??}\fi}%
		{\if@assignpoints@firstrun\textit{??}\fi}%
}
\ProvideDocumentCommand{\numberofexercises}{ }{0}

\ProvideDocumentCommand{\numberofsubexercises}{ }{0}% Added because useful sometimes (e.g. TikZ design)

\ProvideDocumentCommand{\quiztotalpoints}{ s }{%
	%- At the first run, no value available in the "aux" file --> wait for the second run
	\IfBooleanTF{#1}%
		{\if@assignpoints@firstrun\textit{??}\fi}%
		{\if@assignpoints@firstrun\textit{??}\fi}%
}
\ProvideDocumentCommand{\numberofquizzes}{ }{0}

\ProvideDocumentCommand{\numberofexercisesorquizzes}{ }{0}

%-- Getting info about current environments: to be used i.e. in AtBeginExercise/AtEndExercise hooks

\providecommand{\currentexercisetitle}{}
\providecommand{\currentsubexercisetitle}{}

\providecommand{\currentquiztitle}{}
\providecommand{\currentquizquestiontitle}{}

%\providecommand{\currentexercisepoints}{% No more used --> \getpoints
%}

%\providecommand{\currentsubexercisepoints}{% No more used --> \getpoints
%}

%\providecommand{\currentquizpoints}{% No more used --> \getpoints
%}

%\providecommand{\currentquizquestionpoints}{% No more used --> \getpoints
%}

\providecommand{\currentexercisenumber}{%
	\theassignpoints@exercisecount%
}

\providecommand{\currentsubexercisenumber}{%
	\theassignpoints@subexercisecount%
}

\providecommand{\currentquiznumber}{%
	\theassignpoints@quizcount%
}

\providecommand{\currentquizquestionnumber}{%
	\theassignpoints@quizquestioncount%
}

%-- Hooks to modify the exercise/quiz typesetting

%- For exercises
\providecommand{\AtBeginExercise}[1]{
	\renewcommand{\exercisepoints@begin}{#1}%
	\@assignpoints@exercise@layoutdefinedtrue%
}
\providecommand{\AtEndExercise}[1]{
	\renewcommand{\exercisepoints@end}{#1}
}

%- For subexercises
\providecommand{\AtBeginSubexercise}[1]{
	\renewcommand{\exercisepoints@sub@begin}{#1}
	\@assignpoints@subexercise@layoutdefinedtrue%
}
\providecommand{\AtEndSubexercise}[1]{
	\renewcommand{\exercisepoints@sub@end}{#1}
}

%- For quizzes
\providecommand{\AtBeginQuiz}[1]{
	\renewcommand{\quizpoints@begin}{#1}%
	\@assignpoints@quiz@layoutdefinedtrue%
}
\providecommand{\AtEndQuiz}[1]{
	\renewcommand{\quizpoints@end}{#1}
}

%- For quizquestions
\providecommand{\AtBeginQuizquestion}[1]{
	\renewcommand{\quizpoints@question@begin}{#1}
	\@assignpoints@quizquestion@layoutdefinedtrue%
}
\providecommand{\AtEndQuizquestion}[1]{
	\renewcommand{\quizpoints@question@end}{#1}
}

%- For solutions
\providecommand{\AtBeginSolution}[1]{%
	\renewcommand{\solutionpoints@begin}{#1}%
	\@assignpoints@solution@layoutdefinedtrue%
}
\providecommand{\AtEndSolution}[1]{
	\renewcommand{\solutionpoints@end}{#1}
}

%- For subsolutions
\providecommand{\AtBeginSubsolution}[1]{
	\renewcommand{\solutionpoints@subsolution@begin}{#1}%
	\@assignpoints@subsolution@layoutdefinedtrue%
}
\providecommand{\AtEndSubsolution}[1]{
	\renewcommand{\solutionpoints@subsolution@end}{#1}
}

%-- Storage for the hooks

\newcommand{\exercisepoints@begin}{}
\newcommand{\exercisepoints@end}{}

\newcommand{\exercisepoints@sub@begin}{}
\newcommand{\exercisepoints@sub@end}{}

\newcommand{\quizpoints@begin}{}
\newcommand{\quizpoints@end}{}

\newcommand{\quizpoints@question@begin}{}
\newcommand{\quizpoints@question@end}{}

\newcommand{\solutionpoints@begin}{}
\newcommand{\solutionpoints@end}{}

\newcommand{\solutionpoints@subsolution@begin}{}
\newcommand{\solutionpoints@subsolution@end}{}

%-- A very simple default style for exercise/subexercise environments

\if@assignpoints@usecustomlayout\else%
	\AtBeginExercise{%
		\parindent=0pt
		\let\oldparskip\parskip
		\parskip=0pt
		\vspace{.5\baselineskip}\par\hrule%
		\begingroup
			\sffamily\vspace{4pt}%
			% Empty versus non-empty exercise title
			\iftoggle{assignpoints@checkemptystring}%
				{\textbf{\exercisename~\currentexercisenumber}}%
				{\textbf{\exercisename~\currentexercisenumber}%
					\if@assignpoints@usefrenchlanguage%
						\enspace\textemdash\enspace\currentexercisetitle%
					\else%
						\enspace\textendash\enspace\currentexercisetitle%
					\fi%
				}%
			\hfill\textbf{(\getpoints*[exercise]{\currentexercisenumber})}%
			\vskip 4pt\hrule\vskip 4pt%
		\endgroup
	}
	\AtEndExercise{\vspace{4pt}\hrule\par\vspace*{.5\baselineskip}\let\parskip\oldparskip}
	\AtBeginSubexercise{%
		\begingroup
			\par\vspace{2pt}\sffamily%
			% Empty versus non-empty subexercise title
			\iftoggle{assignpoints@checkemptystring}%
				{\emph{\exercisename~\currentexercisenumber.\currentsubexercisenumber}}%
				{\emph{\exercisename~\currentexercisenumber.\currentsubexercisenumber}%
					\if@assignpoints@usefrenchlanguage%
						\enspace\textemdash\enspace\emph{\currentsubexercisetitle}%
					\else%
						\enspace\textendash\enspace\emph{\currentsubexercisetitle}%
					\fi%
				}%
			\dotfill(\emph{\getpoints*[exercise]{\currentexercisenumber.\currentsubexercisenumber}})%
		\endgroup
		\par
	}
	\AtEndSubexercise{\vspace{1pt}\par\let\parindent\parindentoriginal}
\fi

%-- A very simple default style for quiz/quizquestion environments

\if@assignpoints@usecustomlayout\else%
	\AtBeginQuiz{%
		\parindent=0pt
		\let\oldparskip\parskip
		\parskip=0pt
		\vspace{.5\baselineskip}\par\hrule%
		\begingroup
			\sffamily\vspace{4pt}%
			\iftoggle{assignpoints@checkemptystring}% Empty versus non-empty quiz title
				{\textbf{\quizname~\currentquiznumber}}%
				{\textbf{\quizname~\currentquiznumber}%
					\if@assignpoints@usefrenchlanguage%
						\enspace\textemdash\enspace\currentquiztitle%
					\else%
						\enspace\textendash\enspace\currentquiztitle%
					\fi%
				}%
			\hfill\textbf{(\getpoints*[quiz]{\currentquiznumber})}%
			\vskip 4pt\hrule\vskip 4pt%
		\endgroup
	}
	\AtEndQuiz{\vspace*{4pt}\hrule\par\vspace*{.5\baselineskip}\let\parskip\oldparskip}
	\AtBeginQuizquestion{%
		\begingroup
			\par\vspace{2pt}\sffamily%
			\iftoggle{assignpoints@checkemptystring}% Empty versus non-empty subexercise title
				{\emph{\quizname~\currentquiznumber.\currentquizquestionnumber}}%
				{\emph{\quizname~\currentquiznumber.\currentquizquestionnumber}%
					\if@assignpoints@usefrenchlanguage%
						\enspace\textemdash\enspace\emph{\currentquizquestiontitle}%
					\else%
						\enspace\textendash\enspace\emph{\currentquizquestiontitle}%
					\fi%
				}%
			\dotfill(\emph{\getpoints*[quiz]{\currentquiznumber.\currentquizquestionnumber}})%
		\endgroup
		\par
	}
	\AtEndQuizquestion{\vspace{1pt}\par\let\parindent\parindentoriginal}
\fi

%-- A very simple default style for solution/subsolution environments

\if@assignpoints@usecustomlayout\else%
	\AtBeginSolution{%
		\parindent=0pt
		\let\oldparskip\parskip
		\parskip=0pt
		\vspace{.5\baselineskip}\par\hrule%
		\begingroup
			\sffamily\vspace{4pt}%
			% Empty versus non-empty solution title
			\ifstrempty{\currentexercisetitle}%
				{\strut\textbf{\solutionname\space\theassignpoints@solutioncount\space%
					(page\space\pageref{exercise:\theassignpoints@solutioncount})}%
				}%
				{\strut\textbf{\solutionname\space\theassignpoints@solutioncount\space%
					\if@assignpoints@usefrenchlanguage%
						\enspace\textemdash\enspace\currentexercisetitle%
					\else%
						\enspace\textendash\enspace\currentexercisetitle%
					\fi\space%
					(page\space\pageref{exercise:\theassignpoints@solutioncount})%
					\hfill{\small\getpoints*[exercise]{\theassignpoints@solutioncount}}%
				}%
			}%
			\vskip 4pt\hrule\vskip 4pt%
		\endgroup
	}
	\AtEndSolution{\vspace{4pt}\hrule\par\vspace*{.5\baselineskip}\let\parskip\oldparskip}
	\AtBeginSubsolution{%
		\begingroup
			\par\vspace{2pt}\sffamily%
			% Empty versus non-empty subexercise title
			\iftoggle{assignpoints@checkemptystring}%
				{\emph{\solutionname~\currentexercisenumber.\currentsubexercisenumber}}%
				{\emph{\solutionname~\currentexercisenumber.\currentsubexercisenumber}%
					\if@assignpoints@usefrenchlanguage%
						\enspace\textemdash\enspace\emph{\currentsubexercisetitle}%
					\else%
						\enspace\textendash\enspace\emph{\currentsubexercisetitle}%
					\fi%
				}%
			\dotfill(\emph{\getpoints*[exercise]{\currentexercisenumber.\currentsubexercisenumber}})%
		\endgroup
		\par
	}
	\AtEndSubsolution{\vspace{1pt}\par\let\parindent\parindentoriginal}
\fi


%-- Setting points (additive within an exercise or a quiz environment)

\newcommand{\points}[1]{%
	\if@assignpoints@inexercise%
		\addtolength{\assignpoints@currentexercisepoints}{#1 pt}%
		\global\assignpoints@currentexercisepoints=\assignpoints@currentexercisepoints%
		\addtolength{\assignpoints@exercise@totalpoints}{#1 pt}%
		\global\assignpoints@exercise@totalpoints=\assignpoints@exercise@totalpoints%
		\if@assignpoints@insubexercise%
			\addtolength{\assignpoints@currentsubexercisepoints}{#1 pt}%
			\global\assignpoints@currentsubexercisepoints=\assignpoints@currentsubexercisepoints%
		\fi
	\else
		\if@assignpoints@inquiz%
			\addtolength{\assignpoints@currentquizpoints}{#1 pt}%
			\global\assignpoints@currentquizpoints=\assignpoints@currentquizpoints%
			\addtolength{\assignpoints@quiz@totalpoints}{#1 pt}%
			\global\assignpoints@quiz@totalpoints=\assignpoints@quiz@totalpoints%
			\if@assignpoints@inquizquestion%
				\addtolength{\assignpoints@currentquizquestionpoints}{#1 pt}%
				\global\assignpoints@currentquizquestionpoints=\assignpoints@currentquizquestionpoints%
			\fi
		\else
			\PackageError{assignpoints}%
				{\string\points{...} can only be used within exercise/subexercise
					or quiz/questionquiz environments.}%
		\fi
  \fi
}

%-- Calling and displaying points flush right for use in itemize/enumerate environments

\NewDocumentCommand{\itempoints}{ s m }{%
	% Usage − star: display points "unit",
	%         {#2}: set points never mind the environment is (which is detected in the \points macro)
	\points{#2}% This macro adds and stores points, the following only display things
	\IfBooleanTF{#1}{%
		%- Checking if #1 is less or greater than 1 point (see \displaypoints macro)
		\setlength{\assignedcurrentitempoints}{#2pt}%
		\hfill%
		\ifdimequal{\assignedcurrentitempoints}{0.0pt}{}{% <-- If 0.0pt: no display
			% If <length> pt <= 1.0pt displays "point", else "points"
			\ifdimless{\assignedcurrentitempoints}{1.01pt}%
				{%
					\begingroup\small(%
						\assignpointssplitbefore{\assignedcurrentitempoints}%
						\ifnumequal{\assignpointssplitafter{\assignedcurrentitempoints}}{0}%
							%{\space\assignpoints@itempointsunitsingular}%
							%{\assignpointsdecimalsep%
							%	\assignpointssplitafter{\assignedcurrentitempoints}%
							%		\space\assignpoints@itempointsunitsingular}%
							{\space\assignpoints@unitsingular}%
							{\assignpointsdecimalsep%
								\assignpointssplitafter{\assignedcurrentitempoints}%
									\space\assignpoints@unitsingular}%
					)\endgroup%
				}{%
					\begingroup\small(%
						\assignpointssplitbefore{\assignedcurrentitempoints}%
						\ifnumequal{\assignpointssplitafter{\assignedcurrentitempoints}}{0}%
							%{\space\assignpoints@itempointsunitplural}
							%{\assignpointsdecimalsep%
							%	\assignpointssplitafter{\assignedcurrentitempoints}%
							%		\space\assignpoints@itempointsunitplural}%
							{\space\assignpoints@unitplural}
							{\assignpointsdecimalsep%
								\assignpointssplitafter{\assignedcurrentitempoints}%
									\space\assignpoints@unitplural}%
					)\endgroup%
				}%
		}%
		%\hspace{\askreplyboxmargins}
	}{%
		\ifnumequal{\assignpointssplitafter{#2}}{0}%
			{\hfill{\small(\assignpointssplitbefore{#2})}}%
			{\hfill{\small(\assignpointssplitbefore{#2}%
				\assignpointsdecimalsep\assignpointssplitafter{#2})}}%
	}%
}

%- Defining a traditional LaTeX2e starred command
\newcommand{\itempointsltx}{%
	% Usage − star: display points "unit",
	%         {#2}: set points never mind the environment is (which is detected in the \points macro)
	\@ifstar{\itempointsltx@star}{\itempointsltx@nostar}%
}
\newcommand{\itempointsltx@star}[1]{%
		%- Checking if #1 is less or greater than 1 point (see \displaypoints macro)
		\points{#1}% This macro adds and stores points, the following only display things
		\setlength{\assignedcurrentitempoints}{#1pt}%
		\hfill%
		\ifdimequal{\assignedcurrentitempoints}{0.0pt}{}{% <-- If 0.0pt: no display
			% If <length> pt <= 1.0pt displays "point", else "points"
			\ifdimless{\assignedcurrentitempoints}{1.01pt}%
				{%
					\begingroup\small(%
						\assignpointssplitbefore{\assignedcurrentitempoints}%
						\ifnumequal{\assignpointssplitafter{\assignedcurrentitempoints}}{0}%
							%{\space\assignpoints@itempointsunitsingular}%
							%{\assignpointsdecimalsep%
							%	\assignpointssplitafter{\assignedcurrentitempoints}%
							%		\space\assignpoints@itempointsunitsingular}%
							{\space\assignpoints@unitsingular}%
							{\assignpointsdecimalsep%
								\assignpointssplitafter{\assignedcurrentitempoints}%
									\space\assignpoints@unitsingular}%
					)\endgroup%
				}{%
					\begingroup\small(%
						\assignpointssplitbefore{\assignedcurrentitempoints}%
						\ifnumequal{\assignpointssplitafter{\assignedcurrentitempoints}}{0}%
							%{\space\assignpoints@itempointsunitplural}
							%{\assignpointsdecimalsep%
							%	\assignpointssplitafter{\assignedcurrentitempoints}%
							%		\space\assignpoints@itempointsunitplural}%
							{\space\assignpoints@unitplural}
							{\assignpointsdecimalsep%
								\assignpointssplitafter{\assignedcurrentitempoints}%
									\space\assignpoints@unitplural}%
					)\endgroup%
				}%
		}%
}
\newcommand{\itempointsltx@nostar}[1]{%
		\points{#1}% This macro adds and stores points, the following only display things
		\ifnumequal{\assignpointssplitafter{#1}}{0}%
			{\hfill{\small(\assignpointssplitbefore{#1})}}%
			{\hfill{\small(\assignpointssplitbefore{#1}%
				\assignpointsdecimalsep\assignpointssplitafter{#1})}}%
}

%-- Retrieving points for a specific exercise/quiz number as well as subexercise/quizquestion

\NewDocumentCommand{\getpoints}{ s O{exercise} m }{%
	% Usage − star: display points "unit",
	%         [#2]: <env-name> default is exercise environment,
	%         {#3}: number of the environment subexercise/exercise/quiz/quizquestion
	\ifcsname assignpoints@\assignpointsprefix{#2}@points@#3\endcsname% Storage exists
		\ifnumequal{\assignpointssplitafter{#3}}{0}%
			{\def\currentenvnumber{\assignpointssplitbefore{#3}}}%
			{\def\currentenvnumber{\assignpointssplitbefore{#3}.\assignpointssplitafter{#3}}}%
		\ifstrequal{#2}{exercise}%
			{\renewcommand\numberofexercisesorquizzes\numberofexercises}%
			{\renewcommand\numberofexercisesorquizzes\numberofquizzes}%
		\IfBooleanTF{#1}%
		{%- With "unit" i.e. point(s): setting a length and decimal separator language specific
			\ifnumequal{\assignpointssplitbefore{#3}}{0}%
				{\PackageError{assignpoints}{The environment (exercise/quiz...) number cannot be zero}}%
				{\ifnumgreater{\assignpointssplitbefore{#3}}{\numberofexercisesorquizzes}%
					{\PackageWarning{assignpoints}{It seems that you have typed in an exercise/quiz number
						greater than the total number of exercise/quizzes}\textbf{??}}%
					{\setlength{\assignedcurrentpoints}{%
						\assignpoints@readvaluefromaux{\assignpointsprefix{#2}@points}{\currentenvnumber}pt}%
					 \global\assignedcurrentpoints=\assignedcurrentpoints%
					 % If <length> pt <= 1.0pt displays "point", else "points"
					 \ifdimless{\assignedcurrentpoints}{1.01pt}% https://tex.stackexchange.com/questions/2810/
					 	{\assignpointssplitbefore{\assignedcurrentpoints}%
				 		 \ifnumequal{\assignpointssplitafter{\assignedcurrentpoints}}{0}%
				 				{\space\assignpoints@unitsingular}%
								{\assignpointsdecimalsep%
									\assignpointssplitafter{\assignedcurrentpoints}\space\assignpoints@unitsingular}%
						}{\assignpointssplitbefore{\assignedcurrentpoints}%
							\ifnumequal{\assignpointssplitafter{\assignedcurrentpoints}}{0}%
								{\space\assignpoints@unitplural}%
								{\assignpointsdecimalsep%
									\assignpointssplitafter{\assignedcurrentpoints}\space\assignpoints@unitplural}%
						}%
					}%
				}%
		}{%- Without "unit" i.e. point(s)
			\ifnumequal{\assignpointssplitbefore{#3}}{0}%
				{\PackageError{assignpoints}{The environment (exercise/quiz...) number cannot be zero}}%
				{\ifnumgreater{\assignpointssplitbefore{#3}}{\numberofexercisesorquizzes}%
					{\PackageWarning{assignpoints}{It seems that you have typed in an exercise/quiz number
						greater than the total number of exercise/quizzes}\textbf{??}}%
					{\def\currentenvpointsnumber{%
						\assignpoints@readvaluefromaux{\assignpointsprefix{#2}@points}{\currentenvnumber}}%
					 \ifnumequal{\assignpointssplitafter{\currentenvpointsnumber}}{0}%
					 		{%\ifnumequal{\assignpointssplitbefore{\currentenvpointsnumber}}{0}%
					 				%{}% <-- If points = 0, no display
					 				{\assignpointssplitbefore{\currentenvpointsnumber}}%
					 		}%
							{\assignpointssplitbefore{\currentenvpointsnumber}%
								\assignpointsdecimalsep\assignpointssplitafter{\currentenvpointsnumber}}%
					}%
				}%
		}%
	\else% Storage is empty
		\if@assignpoints@firstrun
			\textit{??}%
		\else
			Failed\space\textbf{??}%
			\PackageWarning{assignpoints}%
				{Storage key not found in aux file. You must type in a valid environment number}%
		\fi%
	\fi%
}

\NewDocumentCommand{\displaypoints}{ s O{exercise} m }{% \getpoints but without display if point=0
	% Usage − star: display points "unit",
	%         [#2]: <env-name> default is exercise environment,
	%         {#3}: number of the environment subexercise/exercise/quiz/quizquestion
	\ifcsname assignpoints@\assignpointsprefix{#2}@points@#3\endcsname% Storage exists
		\ifnumequal{\assignpointssplitafter{#3}}{0}%
			{\def\currentenvnumber{\assignpointssplitbefore{#3}}}%
			{\def\currentenvnumber{\assignpointssplitbefore{#3}.\assignpointssplitafter{#3}}}%
		\ifstrequal{#2}{exercise}%
			{\renewcommand\numberofexercisesorquizzes\numberofexercises}%
			{\renewcommand\numberofexercisesorquizzes\numberofquizzes}%
		\IfBooleanTF{#1}%
		{%- With "unit" i.e. point(s): setting a length and decimal separator language specific
			\ifnumequal{\assignpointssplitbefore{#3}}{0}%
				{\PackageError{assignpoints}{The environment (exercise/quiz...) number cannot be zero}}%
				{\ifnumgreater{\assignpointssplitbefore{#3}}{\numberofexercisesorquizzes}%
					{\PackageWarning{assignpoints}{It seems that you have typed in an exercise/quiz number
						greater than the total number of exercise/quizzes}\textbf{??}}%
					{\setlength{\assignedcurrentpoints}{%
						\assignpoints@readvaluefromaux{\assignpointsprefix{#2}@points}{\currentenvnumber}pt}%
					 \global\assignedcurrentpoints=\assignedcurrentpoints%
					 % If <length> pt <= 1.0pt displays "point", else "points"
					 \ifdimless{\assignedcurrentpoints}{1.01pt}% https://tex.stackexchange.com/questions/2810/
					 	{\ifnumequal{\assignpointssplitbefore{\assignedcurrentpoints}}{0}%
					 			{}% <-- If points = 0, no display
					 			{\assignpointssplitbefore{\assignedcurrentpoints}%
				 		 		 \ifnumequal{\assignpointssplitafter{\assignedcurrentpoints}}{0}%
				 						{\space\assignpoints@unitsingular}%
										{\assignpointsdecimalsep%
										 \assignpointssplitafter{\assignedcurrentpoints}%
										 \space\assignpoints@unitsingular}%
								}%
						}{\assignpointssplitbefore{\assignedcurrentpoints}%
							\ifnumequal{\assignpointssplitafter{\assignedcurrentpoints}}{0}%
								{\space\assignpoints@unitplural}%
								{\assignpointsdecimalsep%
									\assignpointssplitafter{\assignedcurrentpoints}\space\assignpoints@unitplural}%
						}%
					}%
				}%
		}{%- Without "unit" i.e. point(s)
			\ifnumequal{\assignpointssplitbefore{#3}}{0}%
				{\PackageError{assignpoints}{The environment (exercise/quiz...) number cannot be zero}}%
				{\ifnumgreater{\assignpointssplitbefore{#3}}{\numberofexercisesorquizzes}%
					{\PackageWarning{assignpoints}{It seems that you have typed in an exercise/quiz number
						greater than the total number of exercise/quizzes}\textbf{??}}%
					{\def\currentenvpointsnumber{%
						\assignpoints@readvaluefromaux{\assignpointsprefix{#2}@points}{\currentenvnumber}}%
					 \ifnumequal{\assignpointssplitafter{\currentenvpointsnumber}}{0}%
					 		{\ifnumequal{\assignpointssplitbefore{\currentenvpointsnumber}}{0}%
					 				{}% <-- If points = 0, no display
					 				{\assignpointssplitbefore{\currentenvpointsnumber}}%
					 		}%
							{\assignpointssplitbefore{\currentenvpointsnumber}%
								\assignpointsdecimalsep\assignpointssplitafter{\currentenvpointsnumber}}%
					}%
				}%
		}%
	\else% Storage is empty
		\if@assignpoints@firstrun
			\textit{??}%
		\else
			Failed\space\textbf{??}%
			\PackageWarning{assignpoints}%
				{Storage key not found in aux file. You must type in a valid environment number}%
		\fi%
	\fi%
}

\NewDocumentCommand{\gettitle}{ O{exercise} m }{%
	% Usage − #1 = <env-name>, #2 = <env-number>
	\ifstrequal{#1}{exercise}% For the exercise title
		{% Storage exists
			\ifcsname assignpoints@\assignpointsprefix{#1}@exercisetitle@#2\endcsname%
				\renewcommand{\currentexercisetitle}{%
					\assignpoints@readvaluefromaux{exercise}{exercisetitle@#2}}%
			\else% Storage is empty or not yet available
				\PackageWarning{assignpoints}%
					{Storage key not found in aux file. Maybe you need to recompile?}%
			\fi%
		}{}%
		\ifstrequal{#1}{subexercise}% For the subexercise title
				{% Storage exists  assignpoints@exercise@subexercisetitle@1.1
					\ifcsname assignpoints@\assignpointsprefix{#1}@title@#2\endcsname%
						\renewcommand{\currentsubexercisetitle}{%
							\assignpoints@readvaluefromaux{subexercise}{title@#2}}%
					\else% Storage is empty or not yet available
						\PackageWarning{assignpoints}%
							{Storage key not found in aux file. Maybe you need to recompile?}%
					\fi%
				}{}%
}

%-- Defining a storage function to write in the ".aux" file (key-value: #1 as key and #2 as value)

\newcommand{\assignpoints@storevaluetoaux}[3]{%
	% Usage: #1 = prefix − #2 = <env-number> − #3 = <length-name>
	\immediate\write\@auxout{%
		\string\global\string\long\string\@namedef{assignpoints@#1@#2}{#3}%
	}%
}

%-- Retrieving values from the "aux" file

\newcommand{\assignpoints@readvaluefromaux}[2]{%
	% Usage: #1 = prefix − #2 = <length-value-without-pt>
	%   e.g. \setlength{<length>}{\assignpoints@readvaluefromaux{\assignpoints@prefix{#1}}{#2}pt}
	\ifcsname assignpoints@#1@#2\endcsname%
		\@nameuse{assignpoints@#1@#2}%
	\else%
		\textbf{??}%
		\PackageWarning{assignpoints}%
			{Key 'assignpoints@#1@#2' not found in aux file. Maybe you need to recompile?}%
	\fi%
}

%-- Setting the skeleton of an exercise environment with an optional title

%- Use \ProvideDocumentEnvironment with \IfValueTF?
\NewDocumentEnvironment{exercise}{ O{} }{% Lets the design to "hooks" AtBeginExercise/AtEndExercise
	\if@assignpoints@inexercise%
		\PackageError{assignpoints}{You cannot nest exercise environments}%
	\fi%
	\if@assignpoints@exercise@layoutdefined\else%
		\PackageError{assignpoints}%
			{Option `customlayout' requires you to define an exercise layout using
			at least `\string\AtBeginExercise{...}'}%
	\fi%
	\global\@assignpoints@inexercisetrue%
	\setlength{\assignpoints@currentexercisepoints}{0pt}%
	\global\assignpoints@currentexercisepoints=\assignpoints@currentexercisepoints%
	\renewcommand{\currentexercisetitle}{#1}%
	\ifstrempty{#1}%
		{\toggletrue{assignpoints@checkemptystring}}%
		{\togglefalse{assignpoints@checkemptystring}}%
	\stepcounter{assignpoints@exercisecount}% Starting the numbering from "1"
	\stepcounter{assignpoints@totalexercisecount}%
	\ifcsname assignpoints@exercise@numberofsubexercises@\currentexercisenumber\endcsname%
		\renewcommand{\numberofsubexercises}{%
			\assignpoints@readvaluefromaux{exercise}{numberofsubexercises@\currentexercisenumber}}%
	\fi
	\exercisepoints@begin%
}{%
	\exercisepoints@end%
	\setcounter{assignpoints@maxsubexercisecount}{\theassignpoints@subexercisecount}%
	\assignpoints@storevaluetoaux%
		{\assignpointsprefix{exercise}@exercisetitle}%
		{\theassignpoints@exercisecount}%
		{\currentexercisetitle}%
	\assignpoints@storevaluetoaux%
		{\assignpointsprefix{exercise}@numberofsubexercises}%
		{\theassignpoints@exercisecount}%
		{\theassignpoints@maxsubexercisecount}%
	\assignpoints@storevaluetoaux%
		{\assignpointsprefix{exercise}@points}%
		{\theassignpoints@exercisecount}%
		{\strip@pt\assignpoints@currentexercisepoints}% https://tex.stackexchange.com/questions/2810/
	\global\@assignpoints@inexercisefalse%
	\togglefalse{assignpoints@checkemptystring}%
}

%-- Setting the skeleton of a subexercise environment with an optional title

%- Use \ProvideDocumentEnvironment with \IfValueTF?
\NewDocumentEnvironment{subexercise}{ O{} }{% Lets the design to "hooks" AtBeginExercise/AtEndExercise
	\if@assignpoints@insubexercise%
	\PackageError{assignpoints}{You cannot nest subexercise environments}%
	\fi%
	\if@assignpoints@subexercise@layoutdefined\else%
	\PackageError{assignpoints}{Option `customlayout' requires you to define a subexercise
	                            layout using at least `\string\AtBeginSubexercise{...}'}
	\fi%
	\global\@assignpoints@insubexercisetrue%
	\setlength{\assignpoints@currentsubexercisepoints}{0pt}%
	\global\assignpoints@currentsubexercisepoints=\assignpoints@currentsubexercisepoints%
	\renewcommand{\currentsubexercisetitle}{#1}%
	\ifstrempty{#1}%
		{\toggletrue{assignpoints@checkemptystring}}%
		{\togglefalse{assignpoints@checkemptystring}}%
	\stepcounter{assignpoints@subexercisecount}% Starting the numbering from "1"
	\exercisepoints@sub@begin%
}{%
	\exercisepoints@sub@end%
	\assignpoints@storevaluetoaux%
		{\assignpointsprefix{subexercise}@title}%
		{\theassignpoints@exercisecount.\theassignpoints@subexercisecount}%
		{\currentsubexercisetitle}%
	\assignpoints@storevaluetoaux%
		{\assignpointsprefix{exercise}@points}%
		{\theassignpoints@exercisecount.\theassignpoints@subexercisecount}%
		{\strip@pt\assignpoints@currentsubexercisepoints}% https://tex.stackexchange.com/questions/2810/
	\global\@assignpoints@insubexercisefalse%
	\togglefalse{assignpoints@checkemptystring}%
}

%-- Setting the skeleton of a quiz environment with an optional title

%- Use \ProvideDocumentEnvironment with \IfValueTF ?
\newenvironment{quiz}[1][]{% Lets the design to "hooks" AtBeginEQuiz/AtEndQuiz
	\if@assignpoints@inquiz%
		\PackageError{assignpoints}{You cannot nest exercise environments}%
	\fi
	\if@assignpoints@quiz@layoutdefined\else%
		\PackageError{assignpoints}%
			{Option `customlayout' requires you to define an quiz layout using
			at least `\string\AtBeginQuiz{...}'}
	\fi
	\global\@assignpoints@inquiztrue%
	\setlength{\assignpoints@currentquizpoints}{0pt}%
	\global\assignpoints@currentquizpoints=\assignpoints@currentquizpoints%
	\renewcommand{\currentquiztitle}{#1}%
	\ifstrempty{#1}%
		{\toggletrue{assignpoints@checkemptystring}}%
		{\togglefalse{assignpoints@checkemptystring}}%
	\stepcounter{assignpoints@quizcount}%
	\stepcounter{assignpoints@totalquizcount}%
	\quizpoints@begin%
}{%
	\quizpoints@end%
	\assignpoints@storevaluetoaux%
		{\assignpointsprefix{quiz}@points}%
		{\theassignpoints@quizcount}%
		{\strip@pt\assignpoints@currentquizpoints}%
	\global\@assignpoints@inquizfalse%
	\togglefalse{assignpoints@checkemptystring}%
}

%-- Setting the skeleton of a quizquestion environment with an optional title

%- Use \ProvideDocumentEnvironment with \IfValueTF ?
\newenvironment{quizquestion}[1][]{% Lets the design to "hooks" AtBeginQuiquestion/AtEndQuizquestion
	\if@assignpoints@inquizquestion%
	\PackageError{assignpoints}{You cannot nest quizquestion environments}%
	\fi%
	\if@assignpoints@quizquestion@layoutdefined\else%
	\PackageError{assignpoints}{Option `customlayout' requires you to define a quizquestion
	                            layout using at least `\string\AtBeginQuizquestion{...}'}
	\fi%
	\global\@assignpoints@inquizquestiontrue%
	\setlength{\assignpoints@currentquizquestionpoints}{0pt}%
	\global\assignpoints@currentquizquestionpoints=\assignpoints@currentquizquestionpoints%
	\renewcommand{\currentquizquestiontitle}{#1}%
	\ifstrempty{#1}%
		{\toggletrue{assignpoints@checkemptystring}}%
		{\togglefalse{assignpoints@checkemptystring}}%
	\stepcounter{assignpoints@quizquestioncount}%
	\quizpoints@question@begin%
}{%
	\quizpoints@question@end%
	\assignpoints@storevaluetoaux%
		{\assignpointsprefix{quiz}@points}%
		{\theassignpoints@quizcount.\theassignpoints@quizquestioncount}%
		{\strip@pt\assignpoints@currentquizquestionpoints}%
	\global\@assignpoints@inquizquestionfalse%
	\togglefalse{assignpoints@checkemptystring}%
}

%-- Setting the skeleton of a solution environment

\NewDocumentEnvironment{solution}{ G{} }{% Lets the design to "hooks" AtBeginSolution/AtEndSolution
	\if@assignpoints@insolution%
		\PackageError{assignpoints}{You cannot nest solution environments}%
	\fi%
	\if@assignpoints@solution@layoutdefined\else%
		\PackageError{assignpoints}%
			{Option `customlayout' requires you to define an solution layout using
			at least `\string\AtBeginSolution{...}'}%
	\fi%
	\global\@assignpoints@insolutiontrue%
	\if@assignpoints@inexercise
		\setcounter{assignpoints@solutioncount}{\theassignpoints@exercisecount}%
	\else
		\stepcounter{assignpoints@solutioncount}%
	\fi%
	%- Adding a "hard" solution reference (not a label but having the same functionality)
	%- The aim is to have control on the display if there is no reference
	\assignpoints@storevaluetoaux%
		{\assignpointsprefix{solution}@reference}%
		{\theassignpoints@solutioncount}%
		{\theassignpoints@solutioncount}%
	\gettitle[exercise]{\theassignpoints@solutioncount}%
	\solutionpoints@begin%
}{%
	\solutionpoints@end%
	\global\@assignpoints@insolutionfalse%
}

%-- Setting the skeleton of a subsolution environment

\NewDocumentEnvironment{subsolution}{ G{} }{% Lets the design to "hooks" AtBeginSubsolution...
	\if@assignpoints@insubsolution%
		\PackageError{assignpoints}{You cannot nest `subsolution' environments}%
	\fi%
	\if@assignpoints@subsolution@layoutdefined\else%
		\PackageError{assignpoints}%
			{Option `customlayout' requires you to define an `subsolution' layout using
			at least `\string\AtBeginSubsolution{...}'}%
	\fi%
	\global\@assignpoints@insubsolutiontrue%
	\stepcounter{assignpoints@subsolutioncount}%
	\gettitle[subexercise]{\theassignpoints@solutioncount.\theassignpoints@subsolutioncount}%
	\solutionpoints@subsolution@begin%
}{%
	\solutionpoints@subsolution@end%
	\global\@assignpoints@insubsolutionfalse%
}

%-- Managing the bonus points (maybe no bonus for quizzes?)

\NewDocumentCommand{\bonuspoints}{ O{exercise} m }{% #1 = <prefix-name> − #2 = <bonus-length-value>
	% Remark (ejazz): Due to a lack of skills, it was not possible to find a more direct (and best)
	%                 way to introduce the application environments scope in this command
	\ifstrequal{#1}{exercise}{%
		\setlength{\assignpoints@exercise@bonuspoints}{#2 pt}%
		\global\assignpoints@exercise@bonuspoints=\assignpoints@exercise@bonuspoints%
		%[\the\assignpoints@exercise@bonuspoints]%
	}{\ifstrequal{#1}{quiz}{%
			\setlength{\assignpoints@quiz@bonuspoints}{#2 pt}%
			\global\assignpoints@quiz@bonuspoints=\assignpoints@quiz@bonuspoints%
			%[\the\assignpoints@quiz@bonuspoints]%
		}{%
			\PackageError{assignpoints}%
				{The environment you want to apply some bonus points has not been yet defined}%
		}% To be continued in case of other environments which have to contain points
	}%
}

\NewDocumentCommand{\getbonuspoints}{ s O{exercise} }{%
	% Usage − star: display point "unit",
	%         [#2]: <env-name> default is exercise environment
	%- At the first run, no value available in the "aux" file --> wait for the second run
	\ifcsname assignpoints@\assignpointsprefix{#2}@points@bonus\endcsname% Storage exists
		\IfBooleanTF{#1}%
		{%- With "unit" i.e. point(s): setting a length and decimal separator language specific
			\IfValueTF{#2}%
				{%
					\setlength{\assignedcurrentbonuspoints}{%
						\assignpoints@readvaluefromaux{\assignpointsprefix{#2}}{points@bonus}pt}%
					\global\assignedcurrentbonuspoints=\assignedcurrentbonuspoints%
					%- If <length> pt <= 1.0pt displays "point", else "points"
					\ifdimless{\assignedcurrentbonuspoints}{1.01pt}%
						{\assignpointssplitbefore{\assignedcurrentbonuspoints}%
						\ifnumequal{\assignpointssplitafter{\assignedcurrentbonuspoints}}{0}%
							{\space\assignpoints@unitsingular}%
							{\assignpointsdecimalsep%
								\assignpointssplitafter{\assignedcurrentbonuspoints}%
								\space\assignpoints@unitsingular}%
						}{\assignpointssplitbefore{\assignedcurrentbonuspoints}%
							\ifnumequal{\assignpointssplitafter{\assignedcurrentbonuspoints}}{0}%
								{\space\assignpoints@unitplural}%
								{\assignpointsdecimalsep%
									\assignpointssplitafter{\assignedcurrentbonuspoints}%
									\space\assignpoints@unitplural}%
						}%
				}{%
					\setlength{\assignedcurrentbonuspoints}{%
						\assignpoints@readvaluefromaux{\assignpointsprefix{exercise}}{points@bonus}pt}%
					\global\assignedcurrentbonuspoints=\assignedcurrentbonuspoints%
					%- If <length> pt <= 1.0pt displays "point", else "points"
					\ifdimless{\assignedcurrentbonuspoints}{1.01pt}%
						{\assignpointssplitbefore{\assignedcurrentbonuspoints}%
						\ifnumequal{\assignpointssplitafter{\assignedcurrentbonuspoints}}{0}%
							{\space\assignpoints@unitsingular}%
							{\assignpointsdecimalsep%
								\assignpointssplitafter{\assignedcurrentbonuspoints}%
								\space\assignpoints@unitsingular}%
						}{\assignpointssplitbefore{\assignedcurrentbonuspoints}%
							\ifnumequal{\assignpointssplitafter{\assignedcurrentbonuspoints}}{0}%
								{\space\assignpoints@unitplural}%
								{\assignpointsdecimalsep%
									\assignpointssplitafter{\assignedcurrentbonuspoints}%
									\space\assignpoints@unitplural}%
						}%
				}%
		}{%- Without "unit" i.e. point(s)
			\IfValueTF{#2}% TODO: add a decimal separator according to the language
				{\assignpoints@readvaluefromaux{\assignpointsprefix{#2}}{points@bonus}}%
				{\assignpoints@readvaluefromaux{\assignpointsprefix{exercise}}{points@bonus}}%
		}%
	\else% Storage is empty
		\if@assignpoints@firstrun
			\textit{??}%
		\else
			Failed\space\textbf{??}%
			\PackageWarning{assignpoints}%
				{Storage key not found in aux file. You must type in a valid key}%
		\fi%
	\fi%
}

\NewDocumentCommand{\exercisetotalpointswithbonus}{ s }{% Defined below at end document
	%- At the first run, no value available in the "aux" file --> wait for the second run
	\IfBooleanTF{#1}%
		{\if@assignpoints@firstrun\textit{??}\fi}%
		{\if@assignpoints@firstrun\textit{??}\fi}%
}

\NewDocumentCommand{\quiztotalpointswithbonus}{ s }{% Defined below at end document
	%- At the first run, no value available in the "aux" file --> wait for the second run
	\IfBooleanTF{#1}%
		{\if@assignpoints@firstrun\textit{??}\fi}%
		{\if@assignpoints@firstrun\textit{??}\fi}%
}

%-- Miscellaneous

\newcommand{\assignpoints@tabdelim}{&\space}
\newcommand{\assignpointsheaderstyle}[1]{\textit{#1}}

%- Stuff to be factorised... As it could be done...

% At first run, can't have \numberofexercice --> wait for the second run
\NewDocumentCommand{\showcaseexercise}{ s }{%
	\setcounter{assignpoints@exercisenumber}{1}%
	\begin{tabular}{lrr}
		\toprule
		\multicolumn{1}{c}{\assignpointsheaderstyle{\exercisename}} &
		\multicolumn{1}{c}{\assignpointsheaderstyle{\showcaseheadermaxpointsname}} &
		\multicolumn{1}{c}{\assignpointsheaderstyle{\showcaseheaderpointsname}} \\
		\toprule
		\IfBooleanTF{#1}{%
			%- https://tex.stackexchange.com/questions/7590/
			\whiledo{\not{\value{assignpoints@exercisenumber}>\numberofexercises}}{%
				\exercisename\space\theassignpoints@exercisenumber
				\assignpoints@tabdelim \getpoints*{\theassignpoints@exercisenumber}
				\assignpoints@tabdelim \stepcounter{assignpoints@exercisenumber} \\ \midrule
			}%
			\bonuspointsname & \getbonuspoints*[exercise] &  \\ \bottomrule
			\totalpointsname & \exercisetotalpoints* &  \\ \bottomrule
			\totalwithbonuspointsname & \exercisetotalpointswithbonus* & \\
		}{%
			%- https://tex.stackexchange.com/questions/7590/
			\whiledo{\not{\value{assignpoints@exercisenumber}>\numberofexercises}}{%
				\exercisename\space\theassignpoints@exercisenumber%
				\assignpoints@tabdelim \getpoints{\theassignpoints@exercisenumber}
				\assignpoints@tabdelim \stepcounter{assignpoints@exercisenumber} \\ \midrule
			}%
			\bonuspointsname & \getbonuspoints[exercise] & \\ \bottomrule
			\totalpointsname & \exercisetotalpoints & \\ \bottomrule
			\totalwithbonuspointsname & \exercisetotalpointswithbonus & \\
		}%
		\bottomrule
	\end{tabular}
}

% At first run, can't have \numberofquiz --> wait for the second run
\NewDocumentCommand{\showcasequiz}{ s }{%
	\setcounter{assignpoints@quiznumber}{1}%
	\begin{tabular}{lrr}
		\toprule
		\multicolumn{1}{c}{\assignpointsheaderstyle{\quizname}} &
		\multicolumn{1}{c}{\assignpointsheaderstyle{\showcaseheadermaxpointsname}} &
		\multicolumn{1}{c}{\assignpointsheaderstyle{\showcaseheaderpointsname}} \\
		\toprule
		\IfBooleanTF{#1}{%
			\whiledo{\not{\value{assignpoints@quiznumber}>\numberofquizzes}}{%
				\quizname\space\theassignpoints@quiznumber
				\assignpoints@tabdelim \getpoints*[quiz]{\theassignpoints@quiznumber}
				\assignpoints@tabdelim \stepcounter{assignpoints@quiznumber} \\ \midrule
			}%
			\bonuspointsname & \getbonuspoints*[quiz] & \\ \bottomrule
			\totalpointsname & \quiztotalpoints* & \\ \bottomrule
			\totalwithbonuspointsname & \quiztotalpointswithbonus* & \\
		}{%
			\whiledo{\not{\value{assignpoints@quiznumber}>\numberofquizzes}}{%
				\quizname\space\theassignpoints@quiznumber%
				\assignpoints@tabdelim \getpoints[quiz]{\theassignpoints@quiznumber}
				\assignpoints@tabdelim \stepcounter{assignpoints@quiznumber} \\ \midrule
			}%
			\bonuspointsname & \getbonuspoints[quiz] & \\ \bottomrule
			\totalpointsname & \quiztotalpoints & \\ \bottomrule
			\totalwithbonuspointsname & \quiztotalpointswithbonus & \\
		}%
		\bottomrule
	\end{tabular}
}

%-- Reading values from the "aux" file at begin

\AtBeginDocument{% https://tex.stackexchange.com/questions/2810/string-replacement-in-latex/
	\setlength{\assignpoints@exercise@totalpoints}{0pt}% reset total points length (exercise)
	\ifcsname assignpoints@exercise@numberofexercises\endcsname%
		\renewcommand{\numberofexercises}{\assignpoints@readvaluefromaux{exercise}{numberofexercises}}
	\fi%
	\ifcsname assignpoints@exercise@points@total\endcsname%
		\RenewDocumentCommand{\exercisetotalpoints}{ s }{%
			\IfBooleanTF{#1}%
				{%
					\setlength{\exercisetotalpointsdim}{%
						\assignpoints@readvaluefromaux{exercise}{points@total}pt}%
					% If <length> pt <= 1.0pt displays "point", else "points"
					\ifdimless{\exercisetotalpointsdim}{1.01pt}%
						{\assignpointssplitbefore{\exercisetotalpointsdim}%
							\ifnumequal{\assignpointssplitafter{\exercisetotalpointsdim}}{0}%
								{\space\assignpoints@unitsingular}%
								{\assignpointsdecimalsep%
									\assignpointssplitafter{\exercisetotalpointsdim}%
									\space\assignpoints@unitsingular}%
						}{\assignpointssplitbefore{\exercisetotalpointsdim}%
							\ifnumequal{\assignpointssplitafter{\exercisetotalpointsdim}}{0}%
								{\space\assignpoints@unitplural}%
								{\assignpointsdecimalsep%
									\assignpointssplitafter{\exercisetotalpointsdim}%
									\space\assignpoints@unitplural}%
						}%
				}%
				%{\assignpoints@readvaluefromaux{exercise}{points@total}}%
				{\def\currentenvpointsnumber{%
						\assignpoints@readvaluefromaux{exercise}{points@total}}%
				 \ifnumequal{\assignpointssplitafter{\currentenvpointsnumber}}{0}%
					 	{\assignpointssplitbefore{\currentenvpointsnumber}}%
						{\assignpointssplitbefore{\currentenvpointsnumber}%
							\assignpointsdecimalsep\assignpointssplitafter{\currentenvpointsnumber}}%
				}%
		}%
	\fi%
	\ifcsname assignpoints@exercise@points@totalwithbonus\endcsname%
		\RenewDocumentCommand{\exercisetotalpointswithbonus}{ s }{%
			\IfBooleanTF{#1}%
				{%
					\setlength{\exercisetotalpointswhithbonusdim}{%
						\assignpoints@readvaluefromaux{exercise}{points@totalwithbonus}pt}%
					% If <length> pt <= 1.0pt displays "point", else "points"
					\ifdimless{\exercisetotalpointswhithbonusdim}{1.01pt}%
						{\assignpointssplitbefore{\exercisetotalpointswhithbonusdim}%
							\ifnumequal{\assignpointssplitafter{\exercisetotalpointswhithbonusdim}}{0}%
								{\space\assignpoints@unitsingular}%
								{\assignpointsdecimalsep%
									\assignpointssplitafter{\exercisetotalpointswhithbonusdim}%
									\space\assignpoints@unitsingular}%
						}{\assignpointssplitbefore{\exercisetotalpointswhithbonusdim}%
							\ifnumequal{\assignpointssplitafter{\exercisetotalpointswhithbonusdim}}{0}%
								{\space\assignpoints@unitplural}%
								{\assignpointsdecimalsep%
									\assignpointssplitafter{\exercisetotalpointswhithbonusdim}%
									\space\assignpoints@unitplural}%
						}%
				}%
				%{\assignpoints@readvaluefromaux{exercise}{points@totalwithbonus}}%
				{\def\currentenvpointsnumber{%
						\assignpoints@readvaluefromaux{exercise}{points@totalwithbonus}}%
				 \ifnumequal{\assignpointssplitafter{\currentenvpointsnumber}}{0}%
					 	{\assignpointssplitbefore{\currentenvpointsnumber}}%
						{\assignpointssplitbefore{\currentenvpointsnumber}%
							\assignpointsdecimalsep\assignpointssplitafter{\currentenvpointsnumber}}%
				}%
		}%
	\fi%
	\setlength{\assignpoints@quiz@totalpoints}{0pt}% reset total points length (quiz)
	\ifcsname assignpoints@quiz@numberofquizzes\endcsname%
		\renewcommand{\numberofquizzes}{\assignpoints@readvaluefromaux{quiz}{numberofquizzes}}%
	\fi%
	\ifcsname assignpoints@quiz@points@total\endcsname%
		\RenewDocumentCommand{\quiztotalpoints}{ s }{%
			\IfBooleanTF{#1}%
				{%
					\setlength{\quiztotalpointsdim}{%
						\assignpoints@readvaluefromaux{quiz}{points@total}pt}%
					% If <length> pt <= 1.0pt displays "point", else "points"
					\ifdimless{\quiztotalpointsdim}{1.01pt}%
						{\assignpointssplitbefore{\quiztotalpointsdim}%
							\ifnumequal{\assignpointssplitafter{\quiztotalpointsdim}}{0}%
								{\space\assignpoints@unitsingular}%
								{\assignpointsdecimalsep%
									\assignpointssplitafter{\quiztotalpointsdim}%
									\space\assignpoints@unitsingular}%
						}{\assignpointssplitbefore{\quiztotalpointsdim}%
							\ifnumequal{\assignpointssplitafter{\quiztotalpointsdim}}{0}%
								{\space\assignpoints@unitplural}%
								{\assignpointsdecimalsep%
									\assignpointssplitafter{\quiztotalpointsdim}%
									\space\assignpoints@unitplural}%
						}%
				}%
				%{\assignpoints@readvaluefromaux{quiz}{points@total}}%
				{\def\currentenvpointsnumber{%
						\assignpoints@readvaluefromaux{quiz}{points@total}}%
				 \ifnumequal{\assignpointssplitafter{\currentenvpointsnumber}}{0}%
					 	{\assignpointssplitbefore{\currentenvpointsnumber}}%
						{\assignpointssplitbefore{\currentenvpointsnumber}%
							\assignpointsdecimalsep\assignpointssplitafter{\currentenvpointsnumber}}%
				}%
		}%
	\fi%
	\ifcsname assignpoints@quiz@points@totalwithbonus\endcsname%
		\RenewDocumentCommand{\quiztotalpointswithbonus}{ s }{%
			\IfBooleanTF{#1}%
				{%
					\setlength{\quiztotalpointswithbonusdim}{%
						\assignpoints@readvaluefromaux{quiz}{points@totalwithbonus}pt}%
					% If <length> pt <= 1.0pt displays "point", else "points"
					\ifdimless{\quiztotalpointswithbonusdim}{1.01pt}%
						{\assignpointssplitbefore{\quiztotalpointswithbonusdim}%
							\ifnumequal{\assignpointssplitafter{\quiztotalpointswithbonusdim}}{0}%
								{\space\assignpoints@unitsingular}%
								{\assignpointsdecimalsep%
									\assignpointssplitafter{\quiztotalpointswithbonusdim}%
									\space\assignpoints@unitsingular}%
						}{\assignpointssplitbefore{\quiztotalpointswithbonusdim}%
							\ifnumequal{\assignpointssplitafter{\quiztotalpointswithbonusdim}}{0}%
								{\space\assignpoints@unitplural}%
								{\assignpointsdecimalsep%
									\assignpointssplitafter{\quiztotalpointswithbonusdim}%
									\space\assignpoints@unitplural}%
						}%
				}%
				%{\assignpoints@readvaluefromaux{quiz}{points@totalwithbonus}}%
				{\def\currentenvpointsnumber{%
						\assignpoints@readvaluefromaux{quiz}{points@totalwithbonus}}%
				 \ifnumequal{\assignpointssplitafter{\currentenvpointsnumber}}{0}%
					 	{\assignpointssplitbefore{\currentenvpointsnumber}}%
						{\assignpointssplitbefore{\currentenvpointsnumber}%
							\assignpointsdecimalsep\assignpointssplitafter{\currentenvpointsnumber}}%
				}%
		}%
	\fi%
}

%-- Storing values in the "aux" file at end

\AtEndDocument{%
	\assignpoints@storevaluetoaux{\assignpointsprefix{exercise}}%
		{numberofexercises}{\theassignpoints@exercisecount}%
	\assignpoints@storevaluetoaux{\assignpointsprefix{exercise}@points}%
		{total}{\strip@pt\assignpoints@exercise@totalpoints}%
	\assignpoints@storevaluetoaux{\assignpointsprefix{exercise}@points}%
		{bonus}{\strip@pt\assignpoints@exercise@bonuspoints}%
	\newlength{\assignpoints@exercise@totalpointswithbonus}%
	\setlength{\assignpoints@exercise@totalpointswithbonus}{\assignpoints@exercise@totalpoints}%
	\addtolength{\assignpoints@exercise@totalpointswithbonus}{\assignpoints@exercise@bonuspoints}%
	\assignpoints@storevaluetoaux{\assignpointsprefix{exercise}@points}%
		{totalwithbonus}{\strip@pt\assignpoints@exercise@totalpointswithbonus}%
	\assignpoints@storevaluetoaux{\assignpointsprefix{quiz}}%
		{numberofquizzes}{\theassignpoints@quizcount}%
	\assignpoints@storevaluetoaux{\assignpointsprefix{quiz}@points}%
		{total}{\strip@pt\assignpoints@quiz@totalpoints}%
	\assignpoints@storevaluetoaux{\assignpointsprefix{quiz}@points}%
		{bonus}{\strip@pt\assignpoints@quiz@bonuspoints}%
	\newlength{\assignpoints@quiz@totalpointswithbonus}%
	\setlength{\assignpoints@quiz@totalpointswithbonus}{\assignpoints@quiz@totalpoints}%
	\addtolength{\assignpoints@quiz@totalpointswithbonus}{\assignpoints@quiz@bonuspoints}%
	\assignpoints@storevaluetoaux{\assignpointsprefix{quiz}@points}%
		{totalwithbonus}{\strip@pt\assignpoints@quiz@totalpointswithbonus}%
}

%%%%%
%-- End of the `assignpoints` package
%%%%%


