%%
%% texjazz-graphic.def
%%
%% A LaTeX file to define graphic.
%%
%% Copyright (c) 2020-2021 ejazz.
%%
%---------------------------------------------------------------------------------------------------
% This work is part of the TeXjazz bundle. It may be distributed and/or modified under the
% conditions of the LaTeX Project Public License, either version 1.3
% of this license or (at your option) any later version.
% The latest version of this license is in
%   http://www.latex-project.org/lppl.txt
% and version 1.3 or later is part of all distributions of LaTeX
% version 2005/12/01 or later.
%
% The Current Maintainer of this work is ejazz <ejazz.fr@gmail.com>.
%
% This work consists of the files:
%     `texjazz-common.def' and `texjazz-common[-fr].tex' (not yet fully available).
% --------------------------------------------------------------------------------------------------

%-- File identification
%----------------------

\ProvidesFile{texjazz-graphic}[2021/02/08 v0.1a − Structure of the document]

%-- Graphic contents management
%------------------------------

%- Inserting external graphical elements
\RequirePackage{graphicx}
%\DeclareGraphicsExtensions{.pdf,.png,.jpg,.eps}

%- Inserting external graphical elements in SVG format (use of Inkscape)
%\RequirePackage{svg}

%\RequirePackage[off]{svg-extract}

%-- Very old fashion (last century!)

%\RequirePackage{epstopdf}% converting eps to pdf files from LaTeX source file
%\epstopdfDeclareGraphicsRule{.eps}{pdf}{.pdf}{% ps2pdf software instead of epstopdf.pl
%  ps2pdf -dEPSCrop #1 \OutputFile
%}
%\epstopdfsetup{outdir=./}

%\RequirePackage{eso-pic}% adding some picture commands to every page at absolute positions

%- Shortcut to include graph file in text (useless: to be deleted)
%\newcommand{\jazzgraph}[2][width=\linewidth,draft=false]{% arg1=options ; arg2=graph-filename
%  \begingroup
%  \centering\vspace{2.5\parskip}% no `\vspace*' (no space at the start at the top of a newpage)
%  \includegraphics[#1]{#2}%
%  \vspace{2.5\parskip}%
%  \endgroup%
%}

%-- TeX PGF/TikZ graphic composing
%---------------------------------

%- Graphic composition
\RequirePackage{tikz}

%- Inserting external graphical TikZ pictures
%\RequirePackage{tikzscale}
%\RequirePackage{incgraph}% From Thomas F. Sturm (author of the `tcolorbox' package)

%- Providing relative nodes to the `current page' (loads `ifoddpage')
\RequirePackage{tikzpagenodes}% From Martin Schärrer

%- Providing vectorian symbols with TikZ (may be used in ToC/TdM)
\RequirePackage{pgfornament}%

%-- TikZ/PGF settings
%--------------------

%----- Interesting readings
%- https://tex.stackexchange.com/questions/89773/how-can-i-create-new-commands-in-tikz
%-----

%- TikZ libraies loading
%- See: https://tex.stackexchange.com/questions/42611 → list-of-available-tikz-libraries
\usetikzlibrary{
  angles,%
  arrows,% arrow styles library
  arrows.meta,% arrow styles library
  %animations,% DOES NOT WORK! WHY? changes the appearance of some part of a graphic over time
  backgrounds,% background management e.g. see http://tex.stackexchange.com/questions/78731/
  bending,
  calc,% Calculations
  %calendar,% calendar display
  chains,% chained nodes
  circuits.logic.US,
  er,% Entity Relationship diagram library
  fit,% fitting a node so that it contains a set of coordinates
  graphs,% chained nodes with edges
  intersections,% calculate intersections of paths
  trees,% to display trees, see the tikz-qtrees package and the very powerful forest package
  %mindmap,% mindmap display
  %decorations.markings,
  decorations.pathmorphing,% Decoration add-ons stuff: cf. G. Medina http://tex.stackexchange.com
  decorations.text,
  matrix,% defines additional styles and options for creating matrices
  patterns,% Some graphical patterns
  positioning,% advanced positioning of nodes
  %shapes,% Doc. says: [...] provided for compatibility only. [...] include sublibraries directly
  shapes.geometric,% diamond, ellipse, trapezium, semi circle, polygon...
  shapes.symbols,% different signs, cloud, signal...
  shapes.arrows,% multiple arrows
  shapes.multipart,% multiple (text) parts nodes
  %shapes.misc,% rounded and chamfered rectangles (see also texjazz-tikz-shapes.def)
  shapes.callouts,% info-bulles type bande-dessinée
  spy,% magnifying a part of a picture
  %svg.path,% specify a path using the SVG-syntax
  %through,% define keys for creating shapes that go through given points
  %tree,% define styles to be used when drawing trees
  %datavisualization,%
   %datavisualization.polar,%
  shadings,% extend the shading possibilities
  shadows,
  fadings,
  tikzmark,% adding \tikzmark and \subnode macros for saving nodes coordinates for later/earlier use
  hobby,% smooth curve between given points: Hobby's algorithm
}

%\usepgfmodule{oo}% define classes, methods, attributes... commands (object-oriented programming)

%- Backgrounds library: must be set in order to be used
%- TeXJazz settings
\pgfdeclarelayer{background}% declare background layer
\pgfdeclarelayer{foreground}
\pgfsetlayers{background,main,foreground}% set the order of the layers (main is the standard layer)

%-- PGF/TikZ utilities
%---------------------

%- Cool features to implement
%- https://tex.stackexchange.com/questions/86693/[...]
%-     [...]is-it-possible-to-use-tikz-to-draw-a-background-on-the-printed-page
%- https://tex.stackexchange.com/questions/351440/[...]
%-     [...]rectangle-with-shading-pattern-as-header-background
%- Storing some experimental codes for testing purpose
%\input{texjazz-tikz-macros.def}

%- Measuring the width of a node that has already been typeset and named
%- See: https://tex.stackexchange.com/questions/8691/widthof-within-tikzpicture
\newcommand\getwidthofnode[2]{% Among others used here for the title layout and display (see below)
  \pgfextractx{#1}{\pgfpointanchor{#2}{east}}%
  % \pgf@xa = length defined by PGF for temporary storage: no need to create a new temporary length
  \pgfextractx{\pgf@xa}{\pgfpointanchor{#2}{west}}%
  \addtolength{#1}{-\pgf@xa}%
}

%- Distance between two referenced nodes. See: https://tex.stackexchange.com/questions/295673
\NewDocumentCommand{\getdistance}{ m m O{center} m O{center} }{%
%- Syntax: {\<length variable/macro>} {<ref1>} [<anchor>] {<ref2>} [<anchor>]
  \pgfpointdiff{\pgfpointanchor{#2}{#3}}% http://tex.stackexchange.com/a/39325/13552
               {\pgfpointanchor{#4}{#5}}% http://tex.stackexchange.com/a/39325/13552
  \pgf@xa=\pgf@x
  \pgf@ya=\pgf@y
  \pgfmathparse{veclen(\pgf@xa,\pgf@ya)}% result as number (floating point)
  %\pgfmathveclen{\pgf@xa}{\pgf@ya}% alternate syntax to pgfmathparse: result as number (floating point)
  %\global\let#1\pgfmathresult pt% does not recognize pt.
  \global\edef#1{\pgfmathresult\ pt}
  %\pgfmathprintnumber{\pgfmathresult}%
}

%- https://tex.stackexchange.com/questions/33703/extract-x-y-coordinate-of-an-arbitrary-point-in-tikz
\newcommand{\gettikzxy}[3]{%
%- Syntax: <node/point name> <xcoord. definition name> <ycoord. definition name>
  \tikz@scan@one@point\pgfutil@firstofone#1\relax
  \edef#2{\the\pgf@x}%
  \edef#3{\the\pgf@y}%
}

%----- Dealing with shapes and anchors: interesting readings
%- 1. First and for reference, read the pgfmoduleshapes.code.tex file (.../tex/generic/pgf/modules)
%-    As a starting point, try to mimic the rectangle shape definition
%- 2.  https://tex.stackexchange.com/questions/33150/creating-node-shapes
%- 3. https://tex.stackexchange.com/questions/303295/
%- 4. https://tex.stackexchange.com/questions/294876/pgf-tikz-node-custom-shape
%- 5. https://tex.stackexchange.com/questions/226322/ (flowchart-decision-shape-enforce-aspect) +1!
%-----

%- Defining more anchors to existing node shapes
%- Original answer from Martin Scharrer: https://tex.stackexchange.com/a/14772/16595
%- Extended version by "Qrrbrbirlbel" to be able to use \savedanchor, \nodeparts and
%- \pgfnodepartstextbox: https://tex.stackexchange.com/questions/29874/
\def\pgfaddtoshape#1#2{%
  \begingroup
  \def\shape@name{#1}
  \let\savedanchor=\pgf@sh@savedanchor
  \let\anchor=\pgf@sh@anchor
  \let\nodeparts=\pgf@sh@boxes
  \nodeparts{text}%
  #2%
  \endgroup
}

%-- Compilation of some PGF/TikZ shapes (see also texjazz-forest.sty TODO → More clever arrangement)

%-- Shapes add-ons: square, superellipse, etc. FIXME TODO harmonizing this stuff with a package

%\input{texjazz-tikz-shapes.def}% Old fashion
%\RequirePackage{texjazz-tikz-shapes}% EXPERIMENTAL TODO → FIXME

%-- Superellipse shape
%---------------------

%- From:
%- /https://tex.stackexchange.com/questions/87740/how-do-i-make-a-superellipse-node-shape-in-tikz
%- https://tex.stackexchange.com/questions/179590/connected-balloons
%- For now, the below macro is redefined in texjazz-modelling.sty as \superellipsedomain
\newcommand*{\superellipse}[3][draw]{% #1 = styles, #2 = node, #3 = superness
  \coordinate (ne) at ($(#2.center)!#3!(#2.north east)$);
  \coordinate (nw) at ($(#2.center)!#3!(#2.north west)$);
  \coordinate (sw) at ($(#2.center)!#3!(#2.south west)$);
  \coordinate (se) at ($(#2.center)!#3!(#2.south east)$);
  \pgfmathparse{-9.6*#3*#3 + 14.4*#3 - 4.8}   % <--------- Magic numbers!
  \xdef\tension{\pgfmathresult}
  \path[#1]
    plot[smooth cycle, tension=\tension] coordinates{
      (#2.east) (ne) (#2.north) (nw) (#2.west) (sw) (#2.south) (se)};
  %\node {\tension};
}

%-- Chamfered splitted rectangle (to be applied in texjazz-modelling.sty?)
%-------------------------------

%- New shape, different from the one given with the shapes.misc library
%- https://tex.stackexchange.com/questions/58389/
%- (db-diagrams-entity-relationship-tikz-chamfered-rectangle-with-split-zones)


%- Cool links to zoom a part of text as in a lens
%------------------------------------------------
%- https://tex.stackexchange.com/questions/184911/magnify-text-using-spy-library/
%- https://tex.stackexchange.com/questions/59705/magnifying-part-of-a-picture-similar-to-tikz-spy-library



%- Color map (see also the `pgfplots' package)
%---------------------------------------------
%- https://tex.stackexchange.com/questions/141448/creating-a-line-separated-gradient-bar-in-tikz

\newcommand{\jazzcolorbar}[3]{% height,width,colors
  \begin{tikzpicture}
    \foreach \x [count=\c] in {#3}{\xdef\numcolo{\c}}
    \pgfmathsetmacro{\pieceheight}{#1/(\numcolo-1)}
    \xdef\lowcolo{}
    \foreach \x [count=\c] in {#3} {%
      \ifthenelse{\c = 1}
        {}
        {\fill[bottom color=\lowcolo,top color=\x] 
            (0,{(\c-2)*\pieceheight}) rectangle (#2,{(\c-1)*\pieceheight});}
      \xdef\lowcolo{\x}
    }
  \end{tikzpicture}
}

\newcommand{\mycolorbar}[3]{% height,width,colors
  \begin{tikzpicture}
  \foreach \x [count=\c] in {#3}{\xdef\numcolo{\c}}
  \pgfmathsetmacro{\pieceheight}{#1/(\numcolo-1)}
    \xdef\lowcolo{}
    \foreach \x [count=\c] in {#3} {%
      \ifnum\c=1\relax
      \else
        \fill[bottom color=\lowcolo,top color=\x] 
          (0,{(\c-2)*\pieceheight}) rectangle (#2,{(\c-1)*\pieceheight});
      \fi
      \xdef\lowcolo{\x}
    }
  \end{tikzpicture}
}

\newcommand{\tickscolorbar}[6]{% height,width,colors,label min,label max,label step
  \begin{tikzpicture}
    \foreach \x [count=\c] in {#3}{\xdef\numcolo{\c}}
    \pgfmathsetmacro{\pieceheight}{#1/(\numcolo-1)}
    \xdef\lowcolo{}
    \foreach \x [count=\c] in {#3} {%
      \ifthenelse{\c = 1}
        {}
        {\fill[bottom color=\lowcolo,top color=\x] 
            (0,{(\c-2)*\pieceheight}) rectangle (#2,{(\c-1)*\pieceheight});}
      \xdef\lowcolo{\x}
    }
    \draw (0,0) rectangle (#2,#1);
    \pgfmathsetmacro{\secondlabel}{#4+#6}
    \pgfmathsetmacro{\lastlabel}{#5+0.01}
    \pgfkeys{/pgf/number format/.cd,fixed,precision=2}
    \foreach \x in {#4,\secondlabel,...,\lastlabel} {
      \draw (#2,{(\x-#4)/(#5-#4)*#1}) -- ++ (0.05,0) node[right] {\pgfmathprintnumber{\x}};}
  \end{tikzpicture}
}


%- https://tex.stackexchange.com/questions/197793/how-to-draw-gradient-arrows-with-tikz/

\def\createshadingfromlist#1#2#3{%
  \pgfutil@tempcnta=0\relax
  \pgfutil@for\pgf@tmp:={#3}\do{\advance\pgfutil@tempcnta by1}%
  \ifnum\pgfutil@tempcnta=1\relax%
    \edef\pgf@spec{color(0)=(#3);color(100)=(#3)}%
  \else%
    \pgfmathparse{50/(\pgfutil@tempcnta-1)}\let\pgf@step=\pgfmathresult%
    %
    \pgfutil@tempcntb=1\relax%
    \pgfutil@for\pgf@tmp:={#3}\do{%
      \ifnum\pgfutil@tempcntb=1\relax%
        \edef\pgf@spec{color(0)=(\pgf@tmp);color(25)=(\pgf@tmp)}%
      \else%
        \ifnum\pgfutil@tempcntb<\pgfutil@tempcnta\relax%
          \pgfmathparse{25+\pgf@step/4+(\pgfutil@tempcntb-1)*\pgf@step}%
          \edef\pgf@spec{\pgf@spec;color(\pgfmathresult)=(\pgf@tmp)}%
        \else%
          \edef\pgf@spec{\pgf@spec;color(75)=(\pgf@tmp);color(100)=(\pgf@tmp)}%
        \fi%
      \fi%
      \advance\pgfutil@tempcntb by1\relax%
    }%
  \fi%
  \csname pgfdeclare#2shading\endcsname{#1}{100}\pgf@spec%
}

\createshadingfromlist{shading1}{vertical}{red,yellow,green,cyan,blue}
\createshadingfromlist{shading2}{vertical}{red,yellow}
\createshadingfromlist{shading3}{vertical}{black,blue,cyan,white}
\createshadingfromlist{shading4}{vertical}%
  {matlabdarkblue,matlabblue,matlabcyan,matlabyellow,matlabred,matlabdarkred}
%\createshadingfromlist{matlabjet}{vertical}%
%  {matlabdarkblue,matlabblue,matlabcyan,matlabyellow,matlabred,matlabdarkred}



%- Pie charts
%------------

%\RequirePackage{pgf-pie}
\RequirePackage{texjazz-piechart}

%\RequirePackage{datapie}

%-- Customed pie charts with plain PGF-Tikz
%------------------------------------------

%- From: https://tex.stackexchange.com/questions/135393/how-to-draw-bar-pie-chart
%-       https://tex.stackexchange.com/questions/407883/pie-chart-labels
%-       https://tex.stackexchange.com/questions/151078/how-to-give-different-color-to-each-pie
%-       https://tex.stackexchange.com/questions/312153/[...]
%-         [..]how-to-use-colors-from-a-pgfplots-colormap-in-pie-chart
%-       https://tex.stackexchange.com/questions/82727/create-a-ring-diagram-in-tex
%-       https://tex.stackexchange.com/questions/195093/customed-pie-chart

\definecolor{rosso}{RGB}{220,57,18}
\definecolor{giallo}{RGB}{255,153,0}
\definecolor{blu}{RGB}{102,140,217}
\definecolor{verde}{RGB}{16,150,24}
\definecolor{viola}{RGB}{153,0,153}

\newcounter{piestart}
\newcounter{piestop}

\newcommand{\slicechart}[5]{ %% use 5 arguments here
  \pgfmathparse{0.5*#1+0.5*#2}
  \let\midangle\pgfmathresult

  % slice %% I changed !10 to !30 to get darker color
  % use the fifth argument #5 to pass the color  
  \draw[thick,fill=#5] (0,0) -- (#1:1) arc (#1:#2:1) -- cycle;

  % outer label
  \node[label=\midangle:#4] at (\midangle:0.8) {};

  % inner label
  \pgfmathparse{min((#2-#1-10)/110*(-0.3),0)}
  \let\temp\pgfmathresult
  \pgfmathparse{max(\temp,-0.5) + 0.8}
  \let\innerpos\pgfmathresult
  \node at (\midangle:\innerpos) {#3};
}

\newcommand{\piechart}[1]{%
  \foreach \p/\t/\c in {#1}
  {
    \setcounter{piestart}{\value{piestop}}
    \addtocounter{piestop}{\p}
    %countstart=\value{piestart} --- countstop=\value{piestop}
    \slicechart{\thepiestart/100*360}
          {\thepiestop/100*360}
          {\p\%}{\t}{\c}  %% here we use the fifth variable
  }%
}


%---------------------------------------------------------------------------------------------------
%---- Plotting functions and data visualization
%---------------------------------------------------------------------------------------------------

%-- Plotting mathematical stuff (over/with TikZ)
%-----------------------------------------------

%\let\pgfmathModX=\pgfmathMod@ % Workaround for the bug with forest and FPU
\RequirePackage{pgfplots}
%\let\pgfmathMod@=\pgfmathModX % Workaround for the bug with forest and FPU
%- TAKE CARE! Note that this workaround affects the following operations:
%-             isprime iseven gcd frac random setseed Mod div real
%- TODO: follow new implementation of pgfplots (Ch. Feuersänger knows the bug 2016/09/17)
%\pgfplotsset{compat=1.16}% 2019 1.16 − 2018 1.14
\pgfplotsset{compat=1.17}% 2020 1.17 − 2018 1.14

%- Group plots as a matrix in the same figure (e.g. for comparison)
%\usepgfplotslibrary{groupplots}

%- Creating PDF files of tikzpictures COMPLIQUÉ À METTRE EN ŒUVRE !
%\usepgfplotslibrary{external}

%- For activation or not see the link below (conflict with front page and chapter tikzpictures
%- Try with filehook in the main document or use before each figure to externalize:
%- \tikzset{external/export next=true}
%---
%- https://tex.stackexchange.com/questions/186732/how-can-i-use-the-tikz-external-library

%- Activate externalization - Take care! Must be put before \begin{document}, but also
%- must be deactivate at each non relevant "tikzpicture" environment like front page, chapters...
%\tikzexternalize%
%- In order to activate/deactivate externalization, use the following macros:
%- \tikzexternaldisable - \tikzexternalesable
%- \tikzset{external/export next=true/false} - \tikzset{external/export=true/false}

%\tikzsetexternalprefix{./Figures/}% Folder for Tikz figures

%-- Data visualization (over/with TikZ)

%\RequirePackage{pgfplotstable}


%---------------------------------------------------------------------------------------------------
%---- Graphical layout elements
%---------------------------------------------------------------------------------------------------

%-- TikZ personal library (icons...) and forest folder trees. TODO: simplify and clean the code!

%\RequirePackage{texjazz-forest}% Trees design (amazing and powerful)


%-- `tcolorbox' package loads `pgf', `verbatim', `etoolbox' and `environ' packages

%- UBUNTU MATE 20.04: A LINK FROM PYTHON TO PYTHON3 *MUST BE DONE* IN /bin (AND MAYBE /usr/bin)
%- IN ORDER TO USE minted, tcolorbox with minted AND PythonTeX WITH PYTHON3:
%-   > sudo ln -s /bin/python3 /bin/python

%---------------------------------------------------------------------------------------------------
%---- Allowing specific extended environments (with the `tcolorbox' package)
%---------------------------------------------------------------------------------------------------

\RequirePackage{tcolorbox}% Really amazing and versatile package (more robust than `mdframed')
%\RequirePackage{mdframed}% Deprecated: only for us! Good package too! →  Change to tcolorbox (DONE)

%-- Libraries in use

%\PassOptionsToPackage{chapter,newfloat=true}{minted}% Already loaded by the `minted' package

\tcbuselibrary{%
  breakable,% provides support for automatic box breaking from one page to another
  fitting,%
  listings,% loads 'listings' package to typeset code programming languages
  %listingsutf8,% loads 'listings' package to typeset code programming languages
  minted,% loads `minted' package, for the time being, only for Python (see PythonTeX below)
  raster,% aligns several colored boxes in a regular way
  skins,% loads `tikz' package and provides additionals (skins) for the colored boxes
  theorems,% provides support for mathematical contents (also loads `amsmath' package)
  xparse,% provides additional keys to extend the design of boxes and environments
  hooks,% provides additional keys to extend the control of the boxes display
  %poster,% supports creation of single page posters with `tcolorbox' boxes
  %magazine,% stores a `tcolorbox' into an array of box registers for later usage
  %vignette,% defines vignette from shapes and 'widgets' (loads skins and fadings TikZ libraries)
  %external,% supports externalization of snippets like graphics or boxes to be stand-alone compiled
}

%----- Important note about `tcolorbox'
%--------------------------------------
%- The first layer of a `tcolorbox' maybe breakable through pages (thanks to the `breakable'
%- library), but embedded `tcolorboxes' inside another `tcolorbox' are unbreakable. Consequently,
%- if one wants to be able to stack and use the features of the `tcolorbox' package inside a boxed
%- environment, the first layer must be designed with TikZ. This use case occurs for example with
%- an exercise environment defined within a `tcolorbox' (see below).
%- The second thing to notice is that floating environments are not allowed inside a `tcolorbox'.
%- Nevertheless, a floating environment (figure, table, etc.) may be embedded in a `tcolorbow'.
%-----

%- For the record, below is the definition of the `tcolorbox' package "addcontentsline" command
%- TAKE CARE that list entries are settled with "list entry" but also with "title" and "titletext"
%- The following redefinition avoid a solely "name + delimiter" ugly entry to be generated if
%- the "titletext" field is empty.

\def\tcb@addcontentsline#1#2{%
  \ifx\kvtcb@listentry\@empty%
    \ifx\kvtcb@title\@empty%
      \ifx\tcbtitletext\@empty%
        %\addcontentsline{#1}{#2}{% Disabling a empty `texttitle' entry in the list of something
        %  \protect\numberline{\thetcbcounter}{\ignorespaces\kvtcb@savedelimiter}}%
      \else%
        \addcontentsline{#1}{#2}{\protect\numberline{\thetcbcounter}{\ignorespaces\tcbtitletext}}%
      \fi%
    \else%
      \addcontentsline{#1}{#2}{\protect\numberline{\thetcbcounter}{\ignorespaces\kvtcb@title}}%
    \fi%
  \else%
    \addcontentsline{#1}{#2}{\kvtcb@listentry}%
  \fi%
}








\endinput





